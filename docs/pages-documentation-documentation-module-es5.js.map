{"version":3,"sources":["node_modules/@iconify/icons-ic/twotone-home.js","node_modules/@iconify/icons-ic/twotone-more-vert.js","node_modules/ngx-showdown/fesm2015/ngx-showdown.js","src/@vex/components/secondary-toolbar/secondary-toolbar.component.html","src/app/pages/documentation/documentation.component.html","node_modules/showdown/dist/showdown.js","src/@vex/components/breadcrumbs/breadcrumb/breadcrumb.component.ts","src/@vex/components/breadcrumbs/breadcrumbs.component.ts","src/@vex/components/breadcrumbs/breadcrumbs.module.ts","src/@vex/components/page-layout/page-layout-content.directive.ts","src/@vex/components/page-layout/page-layout-header.directive.ts","src/@vex/components/page-layout/page-layout.component.scss","src/@vex/components/page-layout/page-layout.component.ts","src/@vex/components/page-layout/page-layout.module.ts","src/@vex/components/secondary-toolbar/secondary-toolbar.component.scss","src/@vex/components/secondary-toolbar/secondary-toolbar.component.ts","src/@vex/components/secondary-toolbar/secondary-toolbar.module.ts","src/app/pages/documentation/documentation-routing.module.ts","src/app/pages/documentation/documentation.component.scss","src/app/pages/documentation/documentation.component.ts","src/app/pages/documentation/documentation.module.ts","src/app/pages/documentation/markdown.module.ts"],"names":[],"mappings":"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","sourcesContent":["var data = {\n\t\"body\": \"<path d=\\\"M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3zm5 15h-2v-6H9v6H7v-7.81l5-4.5 5 4.5V18z\\\" fill=\\\"currentColor\\\"/><path opacity=\\\".3\\\" d=\\\"M7 10.19V18h2v-6h6v6h2v-7.81l-5-4.5z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","var data = {\n\t\"body\": \"<path d=\\\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { Injectable, Optional, SecurityContext, Input, Component, ElementRef, EventEmitter, Output, Directive, Pipe, NgModule } from '@angular/core';\nimport { Converter, getDefaultOptions } from 'showdown';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * @internal\n */\nlet { hasOwnProperty } = {};\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\nlet ShowdownConfig = class ShowdownConfig {\n    constructor(options) {\n        this.merge(options);\n    }\n    /**\n     * Merge options\n     *\n     * @param options - A options object to merge.\n     */\n    merge(options) {\n        for (let key in options) {\n            if (hasOwnProperty.call(options, key)) {\n                this[key] = options[key];\n            }\n        }\n    }\n};\nShowdownConfig = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [Object])\n], ShowdownConfig);\n\n/**\n * @internal\n */\nlet { hasOwnProperty: hasOwnProperty$1 } = {};\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\nlet ShowdownConverter = class ShowdownConverter extends Converter {\n    constructor(config) {\n        super(config && { extensions: config.extensions });\n        this.setFlavor((config && config.flavor) || 'vanilla');\n        this.setOptions(config);\n    }\n    /**\n     * Set options to the converter.\n     *\n     * @param options - A options object to set.\n     */\n    setOptions(options) {\n        for (let key in options) {\n            if (hasOwnProperty$1.call(options, key)) {\n                this.setOption(key, options[key]);\n            }\n        }\n    }\n};\nShowdownConverter = __decorate([\n    Injectable(),\n    __param(0, Optional()),\n    __metadata(\"design:paramtypes\", [ShowdownConfig])\n], ShowdownConverter);\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n    '': true,\n    true: true,\n    false: false\n};\n/**\n * @internal\n */\nlet _toOption = (value) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\nconst ɵ0 = _toOption;\n/**\n * The options keys for the dynamic properties set\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS = Object.keys(getDefaultOptions());\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\nlet ShowdownComponent = class ShowdownComponent extends ShowdownConverter {\n    constructor(_elementRef, _domSanitizer, config) {\n        super(config);\n        this._elementRef = _elementRef;\n        this._domSanitizer = _domSanitizer;\n    }\n    /**\n     * Input alias to `value`.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <div [showdown]=\"# Some Header\"></div>\n     * ```\n     *\n     * Equivalent to\n     * ```html\n     * <showdown [value]=\"# Some Header\"></showdown>\n     * ```\n     */\n    set showdown(value) {\n        this.value = value;\n    }\n    /**\n     * The showdown options of the converter.\n     *\n     * __Example :__\n     *\n     * Bind options\n     * ```typescript\n     * import { Component } from '@angular/core';\n     * import * as Showdown from 'showdown';\n     *\n     * @Component({\n     *   selector: `some`,\n     *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n     * })\n     * export class SomeComponent {\n     *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n     *   // ...\n     * }\n     * ```\n     * Or\n     * ```html\n     * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n     * ```\n     */\n    get options() {\n        return this.getOptions();\n    }\n    set options(options) {\n        this.setOptions(options);\n    }\n    /**\n     * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n     *\n     * __Example :__\n     *\n     * ```typescript\n     * import { Component } from '@angular/core';\n     *\n     * @Component({\n     *   selector: 'some',\n     *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n     *   template: `\n     *     <h3>Input</h3>\n     *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n     *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n     *     <h3>Markdown</h3>\n     *     <pre class=\"box\"><code>{{ text }}</code></pre>\n     *     <h3>Preview</h3>\n     *     <div class=\"box\">\n     *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n     *     </div>\n     *   `;\n     * })\n     * export class SomeComponent {\n     *    text: string = `# A cool link\n     * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n     * }\n     * ```\n     */\n    set sanitize(sanitize) {\n        this._sanitize = _toOption(sanitize);\n    }\n    /**\n     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n     * @internal\n     */\n    ngOnInit() {\n        if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n            this.render(this._elementRef.nativeElement.innerHTML);\n        }\n    }\n    /**\n     * A angular lifecycle method, Use to call to render method after changes.\n     * @internal\n     */\n    ngOnChanges() {\n        this.render();\n    }\n    /**\n     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n     * <showdown #showdown></showdown>\n     * ```\n     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n     */\n    render(value) {\n        if (typeof value === 'string') {\n            this.value = value;\n        }\n        if (typeof this.value === 'string') {\n            let result = this.makeHtml(this.value);\n            if (this._sanitize) {\n                result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n            }\n            this._elementRef.nativeElement.innerHTML = result;\n        }\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], ShowdownComponent.prototype, \"value\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], ShowdownComponent.prototype, \"showdown\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], ShowdownComponent.prototype, \"options\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], ShowdownComponent.prototype, \"sanitize\", null);\nShowdownComponent = __decorate([\n    Component({\n        selector: 'showdown,[showdown]',\n        template: '<ng-content></ng-content>',\n        exportAs: 'showdown',\n        inputs: OPTIONS_PROPERTIES_KEYS\n    }),\n    __param(1, Optional()), __param(2, Optional()),\n    __metadata(\"design:paramtypes\", [ElementRef, DomSanitizer, ShowdownConfig])\n], ShowdownComponent);\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n    Object.defineProperty(ShowdownComponent.prototype, key, {\n        set(value) {\n            this.setOption(key, _toOption(value));\n        },\n        configurable: true\n    });\n}\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\nlet SourceDirective = class SourceDirective {\n    constructor(_showdownComponent, _http) {\n        this._showdownComponent = _showdownComponent;\n        this._http = _http;\n        /**\n         * On error occur.\n         *\n         * __Example :__\n         *\n         * ```html\n         * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n         * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n         * ```\n         */\n        this.error = new EventEmitter();\n    }\n    /**\n     * A angular lifecycle method, Use to call to `load` method on src init/changes\n     * @internal\n     */\n    ngOnChanges() {\n        this.load();\n    }\n    /**\n     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n     * <button (click)=\"source.load(url.value)\">Load</button>\n     * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n     */\n    load(url) {\n        if (url) {\n            this.src = url;\n        }\n        if (this.src) {\n            this\n                ._http\n                .get(this.src, { responseType: 'text' })\n                .subscribe((response) => {\n                this._showdownComponent.render(response);\n            }, (error) => {\n                this.error.emit(error);\n            });\n        }\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], SourceDirective.prototype, \"src\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], SourceDirective.prototype, \"error\", void 0);\nSourceDirective = __decorate([\n    Directive({\n        selector: 'showdown[src],[showdown][src]',\n        exportAs: 'source'\n    }),\n    __metadata(\"design:paramtypes\", [ShowdownComponent, HttpClient])\n], SourceDirective);\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\nlet ShowdownPipe = class ShowdownPipe extends ShowdownConverter {\n    /**\n     * Transform markdown value to html.\n     *\n     * @param value - The markdown value to transform to html.\n     * @param options - A `Showdown` converter options.\n     * @returns Returns the transform result of `value` to html.\n     */\n    transform(value, options) {\n        this.setOptions(options);\n        return this.makeHtml(value);\n    }\n};\nShowdownPipe = __decorate([\n    Pipe({\n        name: 'showdown',\n        pure: false\n    })\n], ShowdownPipe);\n\nvar ShowdownModule_1;\n/**\n * @internal\n */\nconst DECLARATIONS = [\n    ShowdownComponent,\n    ShowdownPipe,\n    SourceDirective\n];\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\nlet ShowdownModule = ShowdownModule_1 = class ShowdownModule {\n    /**\n     * __Example :__\n     *\n     * Add `ShowdownModule` to app `imports` with config.\n     * ```typescript\n     * import { NgModule } from '@angular/core';\n     * import { ShowdownModule } from 'ngx-showdown';\n     *\n     * @NgModule({\n     *   imports: [ ShowdownModule.forRoot({\n     *     smartIndentationFix: true,\n     *     foo: 'bar',\n     *     flavor: 'github',\n     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n     *   }) ];\n     * })\n     * export class AppModule {}\n     * ```\n     * @param config - A root converter config for all converter instances.\n     */\n    static forRoot(config) {\n        return {\n            ngModule: ShowdownModule_1,\n            providers: [{ provide: ShowdownConfig, useValue: config }]\n        };\n    }\n};\nShowdownModule = ShowdownModule_1 = __decorate([\n    NgModule({\n        declarations: DECLARATIONS,\n        providers: [ShowdownConverter],\n        exports: DECLARATIONS\n    })\n], ShowdownModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ShowdownComponent, ShowdownConfig, ShowdownConverter, ShowdownModule, ShowdownPipe, SourceDirective, ɵ0 };\n//# sourceMappingURL=ngx-showdown.js.map\n","export default \"<div class=\\\"secondary-toolbar-placeholder\\\">&nbsp;</div>\\r\\n\\r\\n<div [ngClass]=\\\"{ 'fixed': fixed$ | async, 'w-full': !(fixed$ | async) }\\\"\\r\\n     class=\\\"secondary-toolbar shadow-b py-1 z-40 border-t\\\"\\r\\n     fxLayout=\\\"row\\\">\\r\\n  <div class=\\\"px-gutter\\\" fxFlex=\\\"auto\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" vexContainer>\\r\\n    <h1 *ngIf=\\\"current\\\"\\r\\n        class=\\\"subheading-2 font-medium m-0 ltr:pr-3 rtl:pl-3 ltr:border-r rtl:border-l ltr:mr-3 rtl:ml-3\\\"\\r\\n        fxFlex.xs=\\\"auto\\\">{{ current }}</h1>\\r\\n\\r\\n    <ng-content></ng-content>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<vex-page-layout>\\r\\n\\r\\n  <vex-secondary-toolbar current=\\\"Documentation\\\">\\r\\n    <vex-breadcrumbs [crumbs]=\\\"['Documentation', 'Vex']\\\" fxFlex=\\\"auto\\\"></vex-breadcrumbs>\\r\\n\\r\\n    <button class=\\\"ml-2\\\" color=\\\"primary\\\" mat-icon-button type=\\\"button\\\">\\r\\n      <mat-icon [icIcon]=\\\"icMoreVert\\\"></mat-icon>\\r\\n    </button>\\r\\n  </vex-secondary-toolbar>\\r\\n\\r\\n  <vex-page-layout-content vexContainer>\\r\\n    <div class=\\\"card p-gutter relative\\\">\\r\\n      <showdown src=\\\"/README.md\\\"></showdown>\\r\\n    </div>\\r\\n  </vex-page-layout-content>\\r\\n</vex-page-layout>\\r\\n\"",";/*! showdown v 1.9.1 - 02-11-2019 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \\'section-\\' prefix',\n      type: 'string'\n    },\n    rawPrefixHeaderId: {\n      defaultValue: false,\n      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the \" char is used in the prefix)',\n      type: 'boolean'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    rawHeaderId: {\n      defaultValue: false,\n      describe: 'Remove only spaces, \\' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    literalMidWordAsterisks: {\n      defaultValue: false,\n      describe: 'Parse midword asterisks as literal asterisks',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    },\n    openLinksInNewWindow: {\n      defaultValue: false,\n      description: 'Open all links in new windows',\n      type: 'boolean'\n    },\n    backslashEscapesHTMLTags: {\n      defaultValue: false,\n      description: 'Support for HTML Tag escaping. ex: \\<div>foo\\</div>',\n      type: 'boolean'\n    },\n    emoji: {\n      defaultValue: false,\n      description: 'Enable emoji support. Ex: `this is a :smile: emoji`',\n      type: 'boolean'\n    },\n    underline: {\n      defaultValue: false,\n      description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',\n      type: 'boolean'\n    },\n    completeHTMLDocument: {\n      defaultValue: false,\n      description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',\n      type: 'boolean'\n    },\n    metadata: {\n      defaultValue: false,\n      description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',\n      type: 'boolean'\n    },\n    splitAdjacentBlockquotes: {\n      defaultValue: false,\n      description: 'Split adjacent blockquote blocks',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true,\n        backslashEscapesHTMLTags:             true,\n        emoji:                                true,\n        splitAdjacentBlockquotes:             true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  showdown.resetOptions();\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return Array.isArray(a);\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\n/**\n * Unescape HTML entities\n * @param txt\n * @returns {string}\n */\nshowdown.helper.unescapeHTMLEntities = function (txt) {\n  'use strict';\n\n  return txt\n    .replace(/&quot;/g, '\"')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&amp;/g, '&');\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Returns the index within the passed String object of the first occurrence of the specified regex,\n * starting the search at fromIndex. Returns -1 if the value is not found.\n *\n * @param {string} str string to search\n * @param {RegExp} regex Regular expression to search\n * @param {int} [fromIndex = 0] Index to start the search\n * @returns {Number}\n * @throws InvalidArgumentError\n */\nshowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  if (regex instanceof RegExp === false) {\n    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\n  }\n  var indexOf = str.substring(fromIndex || 0).search(regex);\n  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\n};\n\n/**\n * Splits the passed string object at the defined index, and returns an array composed of the two substrings\n * @param {string} str string to split\n * @param {int} index index to split string at\n * @returns {[string,string]}\n * @throws InvalidArgumentError\n */\nshowdown.helper.splitAtIndex = function (str, index) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  return [str.substring(0, index), str.substring(index)];\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n *\n * @param str\n * @param targetLength\n * @param padString\n * @returns {string}\n */\nshowdown.helper.padEnd = function padEnd (str, targetLength, padString) {\n  'use strict';\n  /*jshint bitwise: false*/\n  // eslint-disable-next-line space-infix-ops\n  targetLength = targetLength>>0; //floor if number or convert non-number to 0;\n  /*jshint bitwise: true*/\n  padString = String(padString || ' ');\n  if (str.length > targetLength) {\n    return String(str);\n  } else {\n    targetLength = targetLength - str.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n    }\n    return String(str) + padString.slice(0,targetLength);\n  }\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof console === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskDashAndColon: /([*_:~])/g\n};\n\n/**\n * EMOJIS LIST\n */\nshowdown.helper.emojis = {\n  '+1':'\\ud83d\\udc4d',\n  '-1':'\\ud83d\\udc4e',\n  '100':'\\ud83d\\udcaf',\n  '1234':'\\ud83d\\udd22',\n  '1st_place_medal':'\\ud83e\\udd47',\n  '2nd_place_medal':'\\ud83e\\udd48',\n  '3rd_place_medal':'\\ud83e\\udd49',\n  '8ball':'\\ud83c\\udfb1',\n  'a':'\\ud83c\\udd70\\ufe0f',\n  'ab':'\\ud83c\\udd8e',\n  'abc':'\\ud83d\\udd24',\n  'abcd':'\\ud83d\\udd21',\n  'accept':'\\ud83c\\ude51',\n  'aerial_tramway':'\\ud83d\\udea1',\n  'airplane':'\\u2708\\ufe0f',\n  'alarm_clock':'\\u23f0',\n  'alembic':'\\u2697\\ufe0f',\n  'alien':'\\ud83d\\udc7d',\n  'ambulance':'\\ud83d\\ude91',\n  'amphora':'\\ud83c\\udffa',\n  'anchor':'\\u2693\\ufe0f',\n  'angel':'\\ud83d\\udc7c',\n  'anger':'\\ud83d\\udca2',\n  'angry':'\\ud83d\\ude20',\n  'anguished':'\\ud83d\\ude27',\n  'ant':'\\ud83d\\udc1c',\n  'apple':'\\ud83c\\udf4e',\n  'aquarius':'\\u2652\\ufe0f',\n  'aries':'\\u2648\\ufe0f',\n  'arrow_backward':'\\u25c0\\ufe0f',\n  'arrow_double_down':'\\u23ec',\n  'arrow_double_up':'\\u23eb',\n  'arrow_down':'\\u2b07\\ufe0f',\n  'arrow_down_small':'\\ud83d\\udd3d',\n  'arrow_forward':'\\u25b6\\ufe0f',\n  'arrow_heading_down':'\\u2935\\ufe0f',\n  'arrow_heading_up':'\\u2934\\ufe0f',\n  'arrow_left':'\\u2b05\\ufe0f',\n  'arrow_lower_left':'\\u2199\\ufe0f',\n  'arrow_lower_right':'\\u2198\\ufe0f',\n  'arrow_right':'\\u27a1\\ufe0f',\n  'arrow_right_hook':'\\u21aa\\ufe0f',\n  'arrow_up':'\\u2b06\\ufe0f',\n  'arrow_up_down':'\\u2195\\ufe0f',\n  'arrow_up_small':'\\ud83d\\udd3c',\n  'arrow_upper_left':'\\u2196\\ufe0f',\n  'arrow_upper_right':'\\u2197\\ufe0f',\n  'arrows_clockwise':'\\ud83d\\udd03',\n  'arrows_counterclockwise':'\\ud83d\\udd04',\n  'art':'\\ud83c\\udfa8',\n  'articulated_lorry':'\\ud83d\\ude9b',\n  'artificial_satellite':'\\ud83d\\udef0',\n  'astonished':'\\ud83d\\ude32',\n  'athletic_shoe':'\\ud83d\\udc5f',\n  'atm':'\\ud83c\\udfe7',\n  'atom_symbol':'\\u269b\\ufe0f',\n  'avocado':'\\ud83e\\udd51',\n  'b':'\\ud83c\\udd71\\ufe0f',\n  'baby':'\\ud83d\\udc76',\n  'baby_bottle':'\\ud83c\\udf7c',\n  'baby_chick':'\\ud83d\\udc24',\n  'baby_symbol':'\\ud83d\\udebc',\n  'back':'\\ud83d\\udd19',\n  'bacon':'\\ud83e\\udd53',\n  'badminton':'\\ud83c\\udff8',\n  'baggage_claim':'\\ud83d\\udec4',\n  'baguette_bread':'\\ud83e\\udd56',\n  'balance_scale':'\\u2696\\ufe0f',\n  'balloon':'\\ud83c\\udf88',\n  'ballot_box':'\\ud83d\\uddf3',\n  'ballot_box_with_check':'\\u2611\\ufe0f',\n  'bamboo':'\\ud83c\\udf8d',\n  'banana':'\\ud83c\\udf4c',\n  'bangbang':'\\u203c\\ufe0f',\n  'bank':'\\ud83c\\udfe6',\n  'bar_chart':'\\ud83d\\udcca',\n  'barber':'\\ud83d\\udc88',\n  'baseball':'\\u26be\\ufe0f',\n  'basketball':'\\ud83c\\udfc0',\n  'basketball_man':'\\u26f9\\ufe0f',\n  'basketball_woman':'\\u26f9\\ufe0f&zwj;\\u2640\\ufe0f',\n  'bat':'\\ud83e\\udd87',\n  'bath':'\\ud83d\\udec0',\n  'bathtub':'\\ud83d\\udec1',\n  'battery':'\\ud83d\\udd0b',\n  'beach_umbrella':'\\ud83c\\udfd6',\n  'bear':'\\ud83d\\udc3b',\n  'bed':'\\ud83d\\udecf',\n  'bee':'\\ud83d\\udc1d',\n  'beer':'\\ud83c\\udf7a',\n  'beers':'\\ud83c\\udf7b',\n  'beetle':'\\ud83d\\udc1e',\n  'beginner':'\\ud83d\\udd30',\n  'bell':'\\ud83d\\udd14',\n  'bellhop_bell':'\\ud83d\\udece',\n  'bento':'\\ud83c\\udf71',\n  'biking_man':'\\ud83d\\udeb4',\n  'bike':'\\ud83d\\udeb2',\n  'biking_woman':'\\ud83d\\udeb4&zwj;\\u2640\\ufe0f',\n  'bikini':'\\ud83d\\udc59',\n  'biohazard':'\\u2623\\ufe0f',\n  'bird':'\\ud83d\\udc26',\n  'birthday':'\\ud83c\\udf82',\n  'black_circle':'\\u26ab\\ufe0f',\n  'black_flag':'\\ud83c\\udff4',\n  'black_heart':'\\ud83d\\udda4',\n  'black_joker':'\\ud83c\\udccf',\n  'black_large_square':'\\u2b1b\\ufe0f',\n  'black_medium_small_square':'\\u25fe\\ufe0f',\n  'black_medium_square':'\\u25fc\\ufe0f',\n  'black_nib':'\\u2712\\ufe0f',\n  'black_small_square':'\\u25aa\\ufe0f',\n  'black_square_button':'\\ud83d\\udd32',\n  'blonde_man':'\\ud83d\\udc71',\n  'blonde_woman':'\\ud83d\\udc71&zwj;\\u2640\\ufe0f',\n  'blossom':'\\ud83c\\udf3c',\n  'blowfish':'\\ud83d\\udc21',\n  'blue_book':'\\ud83d\\udcd8',\n  'blue_car':'\\ud83d\\ude99',\n  'blue_heart':'\\ud83d\\udc99',\n  'blush':'\\ud83d\\ude0a',\n  'boar':'\\ud83d\\udc17',\n  'boat':'\\u26f5\\ufe0f',\n  'bomb':'\\ud83d\\udca3',\n  'book':'\\ud83d\\udcd6',\n  'bookmark':'\\ud83d\\udd16',\n  'bookmark_tabs':'\\ud83d\\udcd1',\n  'books':'\\ud83d\\udcda',\n  'boom':'\\ud83d\\udca5',\n  'boot':'\\ud83d\\udc62',\n  'bouquet':'\\ud83d\\udc90',\n  'bowing_man':'\\ud83d\\ude47',\n  'bow_and_arrow':'\\ud83c\\udff9',\n  'bowing_woman':'\\ud83d\\ude47&zwj;\\u2640\\ufe0f',\n  'bowling':'\\ud83c\\udfb3',\n  'boxing_glove':'\\ud83e\\udd4a',\n  'boy':'\\ud83d\\udc66',\n  'bread':'\\ud83c\\udf5e',\n  'bride_with_veil':'\\ud83d\\udc70',\n  'bridge_at_night':'\\ud83c\\udf09',\n  'briefcase':'\\ud83d\\udcbc',\n  'broken_heart':'\\ud83d\\udc94',\n  'bug':'\\ud83d\\udc1b',\n  'building_construction':'\\ud83c\\udfd7',\n  'bulb':'\\ud83d\\udca1',\n  'bullettrain_front':'\\ud83d\\ude85',\n  'bullettrain_side':'\\ud83d\\ude84',\n  'burrito':'\\ud83c\\udf2f',\n  'bus':'\\ud83d\\ude8c',\n  'business_suit_levitating':'\\ud83d\\udd74',\n  'busstop':'\\ud83d\\ude8f',\n  'bust_in_silhouette':'\\ud83d\\udc64',\n  'busts_in_silhouette':'\\ud83d\\udc65',\n  'butterfly':'\\ud83e\\udd8b',\n  'cactus':'\\ud83c\\udf35',\n  'cake':'\\ud83c\\udf70',\n  'calendar':'\\ud83d\\udcc6',\n  'call_me_hand':'\\ud83e\\udd19',\n  'calling':'\\ud83d\\udcf2',\n  'camel':'\\ud83d\\udc2b',\n  'camera':'\\ud83d\\udcf7',\n  'camera_flash':'\\ud83d\\udcf8',\n  'camping':'\\ud83c\\udfd5',\n  'cancer':'\\u264b\\ufe0f',\n  'candle':'\\ud83d\\udd6f',\n  'candy':'\\ud83c\\udf6c',\n  'canoe':'\\ud83d\\udef6',\n  'capital_abcd':'\\ud83d\\udd20',\n  'capricorn':'\\u2651\\ufe0f',\n  'car':'\\ud83d\\ude97',\n  'card_file_box':'\\ud83d\\uddc3',\n  'card_index':'\\ud83d\\udcc7',\n  'card_index_dividers':'\\ud83d\\uddc2',\n  'carousel_horse':'\\ud83c\\udfa0',\n  'carrot':'\\ud83e\\udd55',\n  'cat':'\\ud83d\\udc31',\n  'cat2':'\\ud83d\\udc08',\n  'cd':'\\ud83d\\udcbf',\n  'chains':'\\u26d3',\n  'champagne':'\\ud83c\\udf7e',\n  'chart':'\\ud83d\\udcb9',\n  'chart_with_downwards_trend':'\\ud83d\\udcc9',\n  'chart_with_upwards_trend':'\\ud83d\\udcc8',\n  'checkered_flag':'\\ud83c\\udfc1',\n  'cheese':'\\ud83e\\uddc0',\n  'cherries':'\\ud83c\\udf52',\n  'cherry_blossom':'\\ud83c\\udf38',\n  'chestnut':'\\ud83c\\udf30',\n  'chicken':'\\ud83d\\udc14',\n  'children_crossing':'\\ud83d\\udeb8',\n  'chipmunk':'\\ud83d\\udc3f',\n  'chocolate_bar':'\\ud83c\\udf6b',\n  'christmas_tree':'\\ud83c\\udf84',\n  'church':'\\u26ea\\ufe0f',\n  'cinema':'\\ud83c\\udfa6',\n  'circus_tent':'\\ud83c\\udfaa',\n  'city_sunrise':'\\ud83c\\udf07',\n  'city_sunset':'\\ud83c\\udf06',\n  'cityscape':'\\ud83c\\udfd9',\n  'cl':'\\ud83c\\udd91',\n  'clamp':'\\ud83d\\udddc',\n  'clap':'\\ud83d\\udc4f',\n  'clapper':'\\ud83c\\udfac',\n  'classical_building':'\\ud83c\\udfdb',\n  'clinking_glasses':'\\ud83e\\udd42',\n  'clipboard':'\\ud83d\\udccb',\n  'clock1':'\\ud83d\\udd50',\n  'clock10':'\\ud83d\\udd59',\n  'clock1030':'\\ud83d\\udd65',\n  'clock11':'\\ud83d\\udd5a',\n  'clock1130':'\\ud83d\\udd66',\n  'clock12':'\\ud83d\\udd5b',\n  'clock1230':'\\ud83d\\udd67',\n  'clock130':'\\ud83d\\udd5c',\n  'clock2':'\\ud83d\\udd51',\n  'clock230':'\\ud83d\\udd5d',\n  'clock3':'\\ud83d\\udd52',\n  'clock330':'\\ud83d\\udd5e',\n  'clock4':'\\ud83d\\udd53',\n  'clock430':'\\ud83d\\udd5f',\n  'clock5':'\\ud83d\\udd54',\n  'clock530':'\\ud83d\\udd60',\n  'clock6':'\\ud83d\\udd55',\n  'clock630':'\\ud83d\\udd61',\n  'clock7':'\\ud83d\\udd56',\n  'clock730':'\\ud83d\\udd62',\n  'clock8':'\\ud83d\\udd57',\n  'clock830':'\\ud83d\\udd63',\n  'clock9':'\\ud83d\\udd58',\n  'clock930':'\\ud83d\\udd64',\n  'closed_book':'\\ud83d\\udcd5',\n  'closed_lock_with_key':'\\ud83d\\udd10',\n  'closed_umbrella':'\\ud83c\\udf02',\n  'cloud':'\\u2601\\ufe0f',\n  'cloud_with_lightning':'\\ud83c\\udf29',\n  'cloud_with_lightning_and_rain':'\\u26c8',\n  'cloud_with_rain':'\\ud83c\\udf27',\n  'cloud_with_snow':'\\ud83c\\udf28',\n  'clown_face':'\\ud83e\\udd21',\n  'clubs':'\\u2663\\ufe0f',\n  'cocktail':'\\ud83c\\udf78',\n  'coffee':'\\u2615\\ufe0f',\n  'coffin':'\\u26b0\\ufe0f',\n  'cold_sweat':'\\ud83d\\ude30',\n  'comet':'\\u2604\\ufe0f',\n  'computer':'\\ud83d\\udcbb',\n  'computer_mouse':'\\ud83d\\uddb1',\n  'confetti_ball':'\\ud83c\\udf8a',\n  'confounded':'\\ud83d\\ude16',\n  'confused':'\\ud83d\\ude15',\n  'congratulations':'\\u3297\\ufe0f',\n  'construction':'\\ud83d\\udea7',\n  'construction_worker_man':'\\ud83d\\udc77',\n  'construction_worker_woman':'\\ud83d\\udc77&zwj;\\u2640\\ufe0f',\n  'control_knobs':'\\ud83c\\udf9b',\n  'convenience_store':'\\ud83c\\udfea',\n  'cookie':'\\ud83c\\udf6a',\n  'cool':'\\ud83c\\udd92',\n  'policeman':'\\ud83d\\udc6e',\n  'copyright':'\\u00a9\\ufe0f',\n  'corn':'\\ud83c\\udf3d',\n  'couch_and_lamp':'\\ud83d\\udecb',\n  'couple':'\\ud83d\\udc6b',\n  'couple_with_heart_woman_man':'\\ud83d\\udc91',\n  'couple_with_heart_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc68',\n  'couple_with_heart_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc69',\n  'couplekiss_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc68',\n  'couplekiss_man_woman':'\\ud83d\\udc8f',\n  'couplekiss_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc69',\n  'cow':'\\ud83d\\udc2e',\n  'cow2':'\\ud83d\\udc04',\n  'cowboy_hat_face':'\\ud83e\\udd20',\n  'crab':'\\ud83e\\udd80',\n  'crayon':'\\ud83d\\udd8d',\n  'credit_card':'\\ud83d\\udcb3',\n  'crescent_moon':'\\ud83c\\udf19',\n  'cricket':'\\ud83c\\udfcf',\n  'crocodile':'\\ud83d\\udc0a',\n  'croissant':'\\ud83e\\udd50',\n  'crossed_fingers':'\\ud83e\\udd1e',\n  'crossed_flags':'\\ud83c\\udf8c',\n  'crossed_swords':'\\u2694\\ufe0f',\n  'crown':'\\ud83d\\udc51',\n  'cry':'\\ud83d\\ude22',\n  'crying_cat_face':'\\ud83d\\ude3f',\n  'crystal_ball':'\\ud83d\\udd2e',\n  'cucumber':'\\ud83e\\udd52',\n  'cupid':'\\ud83d\\udc98',\n  'curly_loop':'\\u27b0',\n  'currency_exchange':'\\ud83d\\udcb1',\n  'curry':'\\ud83c\\udf5b',\n  'custard':'\\ud83c\\udf6e',\n  'customs':'\\ud83d\\udec3',\n  'cyclone':'\\ud83c\\udf00',\n  'dagger':'\\ud83d\\udde1',\n  'dancer':'\\ud83d\\udc83',\n  'dancing_women':'\\ud83d\\udc6f',\n  'dancing_men':'\\ud83d\\udc6f&zwj;\\u2642\\ufe0f',\n  'dango':'\\ud83c\\udf61',\n  'dark_sunglasses':'\\ud83d\\udd76',\n  'dart':'\\ud83c\\udfaf',\n  'dash':'\\ud83d\\udca8',\n  'date':'\\ud83d\\udcc5',\n  'deciduous_tree':'\\ud83c\\udf33',\n  'deer':'\\ud83e\\udd8c',\n  'department_store':'\\ud83c\\udfec',\n  'derelict_house':'\\ud83c\\udfda',\n  'desert':'\\ud83c\\udfdc',\n  'desert_island':'\\ud83c\\udfdd',\n  'desktop_computer':'\\ud83d\\udda5',\n  'male_detective':'\\ud83d\\udd75\\ufe0f',\n  'diamond_shape_with_a_dot_inside':'\\ud83d\\udca0',\n  'diamonds':'\\u2666\\ufe0f',\n  'disappointed':'\\ud83d\\ude1e',\n  'disappointed_relieved':'\\ud83d\\ude25',\n  'dizzy':'\\ud83d\\udcab',\n  'dizzy_face':'\\ud83d\\ude35',\n  'do_not_litter':'\\ud83d\\udeaf',\n  'dog':'\\ud83d\\udc36',\n  'dog2':'\\ud83d\\udc15',\n  'dollar':'\\ud83d\\udcb5',\n  'dolls':'\\ud83c\\udf8e',\n  'dolphin':'\\ud83d\\udc2c',\n  'door':'\\ud83d\\udeaa',\n  'doughnut':'\\ud83c\\udf69',\n  'dove':'\\ud83d\\udd4a',\n  'dragon':'\\ud83d\\udc09',\n  'dragon_face':'\\ud83d\\udc32',\n  'dress':'\\ud83d\\udc57',\n  'dromedary_camel':'\\ud83d\\udc2a',\n  'drooling_face':'\\ud83e\\udd24',\n  'droplet':'\\ud83d\\udca7',\n  'drum':'\\ud83e\\udd41',\n  'duck':'\\ud83e\\udd86',\n  'dvd':'\\ud83d\\udcc0',\n  'e-mail':'\\ud83d\\udce7',\n  'eagle':'\\ud83e\\udd85',\n  'ear':'\\ud83d\\udc42',\n  'ear_of_rice':'\\ud83c\\udf3e',\n  'earth_africa':'\\ud83c\\udf0d',\n  'earth_americas':'\\ud83c\\udf0e',\n  'earth_asia':'\\ud83c\\udf0f',\n  'egg':'\\ud83e\\udd5a',\n  'eggplant':'\\ud83c\\udf46',\n  'eight_pointed_black_star':'\\u2734\\ufe0f',\n  'eight_spoked_asterisk':'\\u2733\\ufe0f',\n  'electric_plug':'\\ud83d\\udd0c',\n  'elephant':'\\ud83d\\udc18',\n  'email':'\\u2709\\ufe0f',\n  'end':'\\ud83d\\udd1a',\n  'envelope_with_arrow':'\\ud83d\\udce9',\n  'euro':'\\ud83d\\udcb6',\n  'european_castle':'\\ud83c\\udff0',\n  'european_post_office':'\\ud83c\\udfe4',\n  'evergreen_tree':'\\ud83c\\udf32',\n  'exclamation':'\\u2757\\ufe0f',\n  'expressionless':'\\ud83d\\ude11',\n  'eye':'\\ud83d\\udc41',\n  'eye_speech_bubble':'\\ud83d\\udc41&zwj;\\ud83d\\udde8',\n  'eyeglasses':'\\ud83d\\udc53',\n  'eyes':'\\ud83d\\udc40',\n  'face_with_head_bandage':'\\ud83e\\udd15',\n  'face_with_thermometer':'\\ud83e\\udd12',\n  'fist_oncoming':'\\ud83d\\udc4a',\n  'factory':'\\ud83c\\udfed',\n  'fallen_leaf':'\\ud83c\\udf42',\n  'family_man_woman_boy':'\\ud83d\\udc6a',\n  'family_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66',\n  'family_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67',\n  'family_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_man_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66',\n  'family_man_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67',\n  'family_man_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_man_woman_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_woman_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_man_woman_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_woman_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66',\n  'family_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_woman_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66',\n  'family_woman_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_woman_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_woman_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_woman_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'fast_forward':'\\u23e9',\n  'fax':'\\ud83d\\udce0',\n  'fearful':'\\ud83d\\ude28',\n  'feet':'\\ud83d\\udc3e',\n  'female_detective':'\\ud83d\\udd75\\ufe0f&zwj;\\u2640\\ufe0f',\n  'ferris_wheel':'\\ud83c\\udfa1',\n  'ferry':'\\u26f4',\n  'field_hockey':'\\ud83c\\udfd1',\n  'file_cabinet':'\\ud83d\\uddc4',\n  'file_folder':'\\ud83d\\udcc1',\n  'film_projector':'\\ud83d\\udcfd',\n  'film_strip':'\\ud83c\\udf9e',\n  'fire':'\\ud83d\\udd25',\n  'fire_engine':'\\ud83d\\ude92',\n  'fireworks':'\\ud83c\\udf86',\n  'first_quarter_moon':'\\ud83c\\udf13',\n  'first_quarter_moon_with_face':'\\ud83c\\udf1b',\n  'fish':'\\ud83d\\udc1f',\n  'fish_cake':'\\ud83c\\udf65',\n  'fishing_pole_and_fish':'\\ud83c\\udfa3',\n  'fist_raised':'\\u270a',\n  'fist_left':'\\ud83e\\udd1b',\n  'fist_right':'\\ud83e\\udd1c',\n  'flags':'\\ud83c\\udf8f',\n  'flashlight':'\\ud83d\\udd26',\n  'fleur_de_lis':'\\u269c\\ufe0f',\n  'flight_arrival':'\\ud83d\\udeec',\n  'flight_departure':'\\ud83d\\udeeb',\n  'floppy_disk':'\\ud83d\\udcbe',\n  'flower_playing_cards':'\\ud83c\\udfb4',\n  'flushed':'\\ud83d\\ude33',\n  'fog':'\\ud83c\\udf2b',\n  'foggy':'\\ud83c\\udf01',\n  'football':'\\ud83c\\udfc8',\n  'footprints':'\\ud83d\\udc63',\n  'fork_and_knife':'\\ud83c\\udf74',\n  'fountain':'\\u26f2\\ufe0f',\n  'fountain_pen':'\\ud83d\\udd8b',\n  'four_leaf_clover':'\\ud83c\\udf40',\n  'fox_face':'\\ud83e\\udd8a',\n  'framed_picture':'\\ud83d\\uddbc',\n  'free':'\\ud83c\\udd93',\n  'fried_egg':'\\ud83c\\udf73',\n  'fried_shrimp':'\\ud83c\\udf64',\n  'fries':'\\ud83c\\udf5f',\n  'frog':'\\ud83d\\udc38',\n  'frowning':'\\ud83d\\ude26',\n  'frowning_face':'\\u2639\\ufe0f',\n  'frowning_man':'\\ud83d\\ude4d&zwj;\\u2642\\ufe0f',\n  'frowning_woman':'\\ud83d\\ude4d',\n  'middle_finger':'\\ud83d\\udd95',\n  'fuelpump':'\\u26fd\\ufe0f',\n  'full_moon':'\\ud83c\\udf15',\n  'full_moon_with_face':'\\ud83c\\udf1d',\n  'funeral_urn':'\\u26b1\\ufe0f',\n  'game_die':'\\ud83c\\udfb2',\n  'gear':'\\u2699\\ufe0f',\n  'gem':'\\ud83d\\udc8e',\n  'gemini':'\\u264a\\ufe0f',\n  'ghost':'\\ud83d\\udc7b',\n  'gift':'\\ud83c\\udf81',\n  'gift_heart':'\\ud83d\\udc9d',\n  'girl':'\\ud83d\\udc67',\n  'globe_with_meridians':'\\ud83c\\udf10',\n  'goal_net':'\\ud83e\\udd45',\n  'goat':'\\ud83d\\udc10',\n  'golf':'\\u26f3\\ufe0f',\n  'golfing_man':'\\ud83c\\udfcc\\ufe0f',\n  'golfing_woman':'\\ud83c\\udfcc\\ufe0f&zwj;\\u2640\\ufe0f',\n  'gorilla':'\\ud83e\\udd8d',\n  'grapes':'\\ud83c\\udf47',\n  'green_apple':'\\ud83c\\udf4f',\n  'green_book':'\\ud83d\\udcd7',\n  'green_heart':'\\ud83d\\udc9a',\n  'green_salad':'\\ud83e\\udd57',\n  'grey_exclamation':'\\u2755',\n  'grey_question':'\\u2754',\n  'grimacing':'\\ud83d\\ude2c',\n  'grin':'\\ud83d\\ude01',\n  'grinning':'\\ud83d\\ude00',\n  'guardsman':'\\ud83d\\udc82',\n  'guardswoman':'\\ud83d\\udc82&zwj;\\u2640\\ufe0f',\n  'guitar':'\\ud83c\\udfb8',\n  'gun':'\\ud83d\\udd2b',\n  'haircut_woman':'\\ud83d\\udc87',\n  'haircut_man':'\\ud83d\\udc87&zwj;\\u2642\\ufe0f',\n  'hamburger':'\\ud83c\\udf54',\n  'hammer':'\\ud83d\\udd28',\n  'hammer_and_pick':'\\u2692',\n  'hammer_and_wrench':'\\ud83d\\udee0',\n  'hamster':'\\ud83d\\udc39',\n  'hand':'\\u270b',\n  'handbag':'\\ud83d\\udc5c',\n  'handshake':'\\ud83e\\udd1d',\n  'hankey':'\\ud83d\\udca9',\n  'hatched_chick':'\\ud83d\\udc25',\n  'hatching_chick':'\\ud83d\\udc23',\n  'headphones':'\\ud83c\\udfa7',\n  'hear_no_evil':'\\ud83d\\ude49',\n  'heart':'\\u2764\\ufe0f',\n  'heart_decoration':'\\ud83d\\udc9f',\n  'heart_eyes':'\\ud83d\\ude0d',\n  'heart_eyes_cat':'\\ud83d\\ude3b',\n  'heartbeat':'\\ud83d\\udc93',\n  'heartpulse':'\\ud83d\\udc97',\n  'hearts':'\\u2665\\ufe0f',\n  'heavy_check_mark':'\\u2714\\ufe0f',\n  'heavy_division_sign':'\\u2797',\n  'heavy_dollar_sign':'\\ud83d\\udcb2',\n  'heavy_heart_exclamation':'\\u2763\\ufe0f',\n  'heavy_minus_sign':'\\u2796',\n  'heavy_multiplication_x':'\\u2716\\ufe0f',\n  'heavy_plus_sign':'\\u2795',\n  'helicopter':'\\ud83d\\ude81',\n  'herb':'\\ud83c\\udf3f',\n  'hibiscus':'\\ud83c\\udf3a',\n  'high_brightness':'\\ud83d\\udd06',\n  'high_heel':'\\ud83d\\udc60',\n  'hocho':'\\ud83d\\udd2a',\n  'hole':'\\ud83d\\udd73',\n  'honey_pot':'\\ud83c\\udf6f',\n  'horse':'\\ud83d\\udc34',\n  'horse_racing':'\\ud83c\\udfc7',\n  'hospital':'\\ud83c\\udfe5',\n  'hot_pepper':'\\ud83c\\udf36',\n  'hotdog':'\\ud83c\\udf2d',\n  'hotel':'\\ud83c\\udfe8',\n  'hotsprings':'\\u2668\\ufe0f',\n  'hourglass':'\\u231b\\ufe0f',\n  'hourglass_flowing_sand':'\\u23f3',\n  'house':'\\ud83c\\udfe0',\n  'house_with_garden':'\\ud83c\\udfe1',\n  'houses':'\\ud83c\\udfd8',\n  'hugs':'\\ud83e\\udd17',\n  'hushed':'\\ud83d\\ude2f',\n  'ice_cream':'\\ud83c\\udf68',\n  'ice_hockey':'\\ud83c\\udfd2',\n  'ice_skate':'\\u26f8',\n  'icecream':'\\ud83c\\udf66',\n  'id':'\\ud83c\\udd94',\n  'ideograph_advantage':'\\ud83c\\ude50',\n  'imp':'\\ud83d\\udc7f',\n  'inbox_tray':'\\ud83d\\udce5',\n  'incoming_envelope':'\\ud83d\\udce8',\n  'tipping_hand_woman':'\\ud83d\\udc81',\n  'information_source':'\\u2139\\ufe0f',\n  'innocent':'\\ud83d\\ude07',\n  'interrobang':'\\u2049\\ufe0f',\n  'iphone':'\\ud83d\\udcf1',\n  'izakaya_lantern':'\\ud83c\\udfee',\n  'jack_o_lantern':'\\ud83c\\udf83',\n  'japan':'\\ud83d\\uddfe',\n  'japanese_castle':'\\ud83c\\udfef',\n  'japanese_goblin':'\\ud83d\\udc7a',\n  'japanese_ogre':'\\ud83d\\udc79',\n  'jeans':'\\ud83d\\udc56',\n  'joy':'\\ud83d\\ude02',\n  'joy_cat':'\\ud83d\\ude39',\n  'joystick':'\\ud83d\\udd79',\n  'kaaba':'\\ud83d\\udd4b',\n  'key':'\\ud83d\\udd11',\n  'keyboard':'\\u2328\\ufe0f',\n  'keycap_ten':'\\ud83d\\udd1f',\n  'kick_scooter':'\\ud83d\\udef4',\n  'kimono':'\\ud83d\\udc58',\n  'kiss':'\\ud83d\\udc8b',\n  'kissing':'\\ud83d\\ude17',\n  'kissing_cat':'\\ud83d\\ude3d',\n  'kissing_closed_eyes':'\\ud83d\\ude1a',\n  'kissing_heart':'\\ud83d\\ude18',\n  'kissing_smiling_eyes':'\\ud83d\\ude19',\n  'kiwi_fruit':'\\ud83e\\udd5d',\n  'koala':'\\ud83d\\udc28',\n  'koko':'\\ud83c\\ude01',\n  'label':'\\ud83c\\udff7',\n  'large_blue_circle':'\\ud83d\\udd35',\n  'large_blue_diamond':'\\ud83d\\udd37',\n  'large_orange_diamond':'\\ud83d\\udd36',\n  'last_quarter_moon':'\\ud83c\\udf17',\n  'last_quarter_moon_with_face':'\\ud83c\\udf1c',\n  'latin_cross':'\\u271d\\ufe0f',\n  'laughing':'\\ud83d\\ude06',\n  'leaves':'\\ud83c\\udf43',\n  'ledger':'\\ud83d\\udcd2',\n  'left_luggage':'\\ud83d\\udec5',\n  'left_right_arrow':'\\u2194\\ufe0f',\n  'leftwards_arrow_with_hook':'\\u21a9\\ufe0f',\n  'lemon':'\\ud83c\\udf4b',\n  'leo':'\\u264c\\ufe0f',\n  'leopard':'\\ud83d\\udc06',\n  'level_slider':'\\ud83c\\udf9a',\n  'libra':'\\u264e\\ufe0f',\n  'light_rail':'\\ud83d\\ude88',\n  'link':'\\ud83d\\udd17',\n  'lion':'\\ud83e\\udd81',\n  'lips':'\\ud83d\\udc44',\n  'lipstick':'\\ud83d\\udc84',\n  'lizard':'\\ud83e\\udd8e',\n  'lock':'\\ud83d\\udd12',\n  'lock_with_ink_pen':'\\ud83d\\udd0f',\n  'lollipop':'\\ud83c\\udf6d',\n  'loop':'\\u27bf',\n  'loud_sound':'\\ud83d\\udd0a',\n  'loudspeaker':'\\ud83d\\udce2',\n  'love_hotel':'\\ud83c\\udfe9',\n  'love_letter':'\\ud83d\\udc8c',\n  'low_brightness':'\\ud83d\\udd05',\n  'lying_face':'\\ud83e\\udd25',\n  'm':'\\u24c2\\ufe0f',\n  'mag':'\\ud83d\\udd0d',\n  'mag_right':'\\ud83d\\udd0e',\n  'mahjong':'\\ud83c\\udc04\\ufe0f',\n  'mailbox':'\\ud83d\\udceb',\n  'mailbox_closed':'\\ud83d\\udcea',\n  'mailbox_with_mail':'\\ud83d\\udcec',\n  'mailbox_with_no_mail':'\\ud83d\\udced',\n  'man':'\\ud83d\\udc68',\n  'man_artist':'\\ud83d\\udc68&zwj;\\ud83c\\udfa8',\n  'man_astronaut':'\\ud83d\\udc68&zwj;\\ud83d\\ude80',\n  'man_cartwheeling':'\\ud83e\\udd38&zwj;\\u2642\\ufe0f',\n  'man_cook':'\\ud83d\\udc68&zwj;\\ud83c\\udf73',\n  'man_dancing':'\\ud83d\\udd7a',\n  'man_facepalming':'\\ud83e\\udd26&zwj;\\u2642\\ufe0f',\n  'man_factory_worker':'\\ud83d\\udc68&zwj;\\ud83c\\udfed',\n  'man_farmer':'\\ud83d\\udc68&zwj;\\ud83c\\udf3e',\n  'man_firefighter':'\\ud83d\\udc68&zwj;\\ud83d\\ude92',\n  'man_health_worker':'\\ud83d\\udc68&zwj;\\u2695\\ufe0f',\n  'man_in_tuxedo':'\\ud83e\\udd35',\n  'man_judge':'\\ud83d\\udc68&zwj;\\u2696\\ufe0f',\n  'man_juggling':'\\ud83e\\udd39&zwj;\\u2642\\ufe0f',\n  'man_mechanic':'\\ud83d\\udc68&zwj;\\ud83d\\udd27',\n  'man_office_worker':'\\ud83d\\udc68&zwj;\\ud83d\\udcbc',\n  'man_pilot':'\\ud83d\\udc68&zwj;\\u2708\\ufe0f',\n  'man_playing_handball':'\\ud83e\\udd3e&zwj;\\u2642\\ufe0f',\n  'man_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2642\\ufe0f',\n  'man_scientist':'\\ud83d\\udc68&zwj;\\ud83d\\udd2c',\n  'man_shrugging':'\\ud83e\\udd37&zwj;\\u2642\\ufe0f',\n  'man_singer':'\\ud83d\\udc68&zwj;\\ud83c\\udfa4',\n  'man_student':'\\ud83d\\udc68&zwj;\\ud83c\\udf93',\n  'man_teacher':'\\ud83d\\udc68&zwj;\\ud83c\\udfeb',\n  'man_technologist':'\\ud83d\\udc68&zwj;\\ud83d\\udcbb',\n  'man_with_gua_pi_mao':'\\ud83d\\udc72',\n  'man_with_turban':'\\ud83d\\udc73',\n  'tangerine':'\\ud83c\\udf4a',\n  'mans_shoe':'\\ud83d\\udc5e',\n  'mantelpiece_clock':'\\ud83d\\udd70',\n  'maple_leaf':'\\ud83c\\udf41',\n  'martial_arts_uniform':'\\ud83e\\udd4b',\n  'mask':'\\ud83d\\ude37',\n  'massage_woman':'\\ud83d\\udc86',\n  'massage_man':'\\ud83d\\udc86&zwj;\\u2642\\ufe0f',\n  'meat_on_bone':'\\ud83c\\udf56',\n  'medal_military':'\\ud83c\\udf96',\n  'medal_sports':'\\ud83c\\udfc5',\n  'mega':'\\ud83d\\udce3',\n  'melon':'\\ud83c\\udf48',\n  'memo':'\\ud83d\\udcdd',\n  'men_wrestling':'\\ud83e\\udd3c&zwj;\\u2642\\ufe0f',\n  'menorah':'\\ud83d\\udd4e',\n  'mens':'\\ud83d\\udeb9',\n  'metal':'\\ud83e\\udd18',\n  'metro':'\\ud83d\\ude87',\n  'microphone':'\\ud83c\\udfa4',\n  'microscope':'\\ud83d\\udd2c',\n  'milk_glass':'\\ud83e\\udd5b',\n  'milky_way':'\\ud83c\\udf0c',\n  'minibus':'\\ud83d\\ude90',\n  'minidisc':'\\ud83d\\udcbd',\n  'mobile_phone_off':'\\ud83d\\udcf4',\n  'money_mouth_face':'\\ud83e\\udd11',\n  'money_with_wings':'\\ud83d\\udcb8',\n  'moneybag':'\\ud83d\\udcb0',\n  'monkey':'\\ud83d\\udc12',\n  'monkey_face':'\\ud83d\\udc35',\n  'monorail':'\\ud83d\\ude9d',\n  'moon':'\\ud83c\\udf14',\n  'mortar_board':'\\ud83c\\udf93',\n  'mosque':'\\ud83d\\udd4c',\n  'motor_boat':'\\ud83d\\udee5',\n  'motor_scooter':'\\ud83d\\udef5',\n  'motorcycle':'\\ud83c\\udfcd',\n  'motorway':'\\ud83d\\udee3',\n  'mount_fuji':'\\ud83d\\uddfb',\n  'mountain':'\\u26f0',\n  'mountain_biking_man':'\\ud83d\\udeb5',\n  'mountain_biking_woman':'\\ud83d\\udeb5&zwj;\\u2640\\ufe0f',\n  'mountain_cableway':'\\ud83d\\udea0',\n  'mountain_railway':'\\ud83d\\ude9e',\n  'mountain_snow':'\\ud83c\\udfd4',\n  'mouse':'\\ud83d\\udc2d',\n  'mouse2':'\\ud83d\\udc01',\n  'movie_camera':'\\ud83c\\udfa5',\n  'moyai':'\\ud83d\\uddff',\n  'mrs_claus':'\\ud83e\\udd36',\n  'muscle':'\\ud83d\\udcaa',\n  'mushroom':'\\ud83c\\udf44',\n  'musical_keyboard':'\\ud83c\\udfb9',\n  'musical_note':'\\ud83c\\udfb5',\n  'musical_score':'\\ud83c\\udfbc',\n  'mute':'\\ud83d\\udd07',\n  'nail_care':'\\ud83d\\udc85',\n  'name_badge':'\\ud83d\\udcdb',\n  'national_park':'\\ud83c\\udfde',\n  'nauseated_face':'\\ud83e\\udd22',\n  'necktie':'\\ud83d\\udc54',\n  'negative_squared_cross_mark':'\\u274e',\n  'nerd_face':'\\ud83e\\udd13',\n  'neutral_face':'\\ud83d\\ude10',\n  'new':'\\ud83c\\udd95',\n  'new_moon':'\\ud83c\\udf11',\n  'new_moon_with_face':'\\ud83c\\udf1a',\n  'newspaper':'\\ud83d\\udcf0',\n  'newspaper_roll':'\\ud83d\\uddde',\n  'next_track_button':'\\u23ed',\n  'ng':'\\ud83c\\udd96',\n  'no_good_man':'\\ud83d\\ude45&zwj;\\u2642\\ufe0f',\n  'no_good_woman':'\\ud83d\\ude45',\n  'night_with_stars':'\\ud83c\\udf03',\n  'no_bell':'\\ud83d\\udd15',\n  'no_bicycles':'\\ud83d\\udeb3',\n  'no_entry':'\\u26d4\\ufe0f',\n  'no_entry_sign':'\\ud83d\\udeab',\n  'no_mobile_phones':'\\ud83d\\udcf5',\n  'no_mouth':'\\ud83d\\ude36',\n  'no_pedestrians':'\\ud83d\\udeb7',\n  'no_smoking':'\\ud83d\\udead',\n  'non-potable_water':'\\ud83d\\udeb1',\n  'nose':'\\ud83d\\udc43',\n  'notebook':'\\ud83d\\udcd3',\n  'notebook_with_decorative_cover':'\\ud83d\\udcd4',\n  'notes':'\\ud83c\\udfb6',\n  'nut_and_bolt':'\\ud83d\\udd29',\n  'o':'\\u2b55\\ufe0f',\n  'o2':'\\ud83c\\udd7e\\ufe0f',\n  'ocean':'\\ud83c\\udf0a',\n  'octopus':'\\ud83d\\udc19',\n  'oden':'\\ud83c\\udf62',\n  'office':'\\ud83c\\udfe2',\n  'oil_drum':'\\ud83d\\udee2',\n  'ok':'\\ud83c\\udd97',\n  'ok_hand':'\\ud83d\\udc4c',\n  'ok_man':'\\ud83d\\ude46&zwj;\\u2642\\ufe0f',\n  'ok_woman':'\\ud83d\\ude46',\n  'old_key':'\\ud83d\\udddd',\n  'older_man':'\\ud83d\\udc74',\n  'older_woman':'\\ud83d\\udc75',\n  'om':'\\ud83d\\udd49',\n  'on':'\\ud83d\\udd1b',\n  'oncoming_automobile':'\\ud83d\\ude98',\n  'oncoming_bus':'\\ud83d\\ude8d',\n  'oncoming_police_car':'\\ud83d\\ude94',\n  'oncoming_taxi':'\\ud83d\\ude96',\n  'open_file_folder':'\\ud83d\\udcc2',\n  'open_hands':'\\ud83d\\udc50',\n  'open_mouth':'\\ud83d\\ude2e',\n  'open_umbrella':'\\u2602\\ufe0f',\n  'ophiuchus':'\\u26ce',\n  'orange_book':'\\ud83d\\udcd9',\n  'orthodox_cross':'\\u2626\\ufe0f',\n  'outbox_tray':'\\ud83d\\udce4',\n  'owl':'\\ud83e\\udd89',\n  'ox':'\\ud83d\\udc02',\n  'package':'\\ud83d\\udce6',\n  'page_facing_up':'\\ud83d\\udcc4',\n  'page_with_curl':'\\ud83d\\udcc3',\n  'pager':'\\ud83d\\udcdf',\n  'paintbrush':'\\ud83d\\udd8c',\n  'palm_tree':'\\ud83c\\udf34',\n  'pancakes':'\\ud83e\\udd5e',\n  'panda_face':'\\ud83d\\udc3c',\n  'paperclip':'\\ud83d\\udcce',\n  'paperclips':'\\ud83d\\udd87',\n  'parasol_on_ground':'\\u26f1',\n  'parking':'\\ud83c\\udd7f\\ufe0f',\n  'part_alternation_mark':'\\u303d\\ufe0f',\n  'partly_sunny':'\\u26c5\\ufe0f',\n  'passenger_ship':'\\ud83d\\udef3',\n  'passport_control':'\\ud83d\\udec2',\n  'pause_button':'\\u23f8',\n  'peace_symbol':'\\u262e\\ufe0f',\n  'peach':'\\ud83c\\udf51',\n  'peanuts':'\\ud83e\\udd5c',\n  'pear':'\\ud83c\\udf50',\n  'pen':'\\ud83d\\udd8a',\n  'pencil2':'\\u270f\\ufe0f',\n  'penguin':'\\ud83d\\udc27',\n  'pensive':'\\ud83d\\ude14',\n  'performing_arts':'\\ud83c\\udfad',\n  'persevere':'\\ud83d\\ude23',\n  'person_fencing':'\\ud83e\\udd3a',\n  'pouting_woman':'\\ud83d\\ude4e',\n  'phone':'\\u260e\\ufe0f',\n  'pick':'\\u26cf',\n  'pig':'\\ud83d\\udc37',\n  'pig2':'\\ud83d\\udc16',\n  'pig_nose':'\\ud83d\\udc3d',\n  'pill':'\\ud83d\\udc8a',\n  'pineapple':'\\ud83c\\udf4d',\n  'ping_pong':'\\ud83c\\udfd3',\n  'pisces':'\\u2653\\ufe0f',\n  'pizza':'\\ud83c\\udf55',\n  'place_of_worship':'\\ud83d\\uded0',\n  'plate_with_cutlery':'\\ud83c\\udf7d',\n  'play_or_pause_button':'\\u23ef',\n  'point_down':'\\ud83d\\udc47',\n  'point_left':'\\ud83d\\udc48',\n  'point_right':'\\ud83d\\udc49',\n  'point_up':'\\u261d\\ufe0f',\n  'point_up_2':'\\ud83d\\udc46',\n  'police_car':'\\ud83d\\ude93',\n  'policewoman':'\\ud83d\\udc6e&zwj;\\u2640\\ufe0f',\n  'poodle':'\\ud83d\\udc29',\n  'popcorn':'\\ud83c\\udf7f',\n  'post_office':'\\ud83c\\udfe3',\n  'postal_horn':'\\ud83d\\udcef',\n  'postbox':'\\ud83d\\udcee',\n  'potable_water':'\\ud83d\\udeb0',\n  'potato':'\\ud83e\\udd54',\n  'pouch':'\\ud83d\\udc5d',\n  'poultry_leg':'\\ud83c\\udf57',\n  'pound':'\\ud83d\\udcb7',\n  'rage':'\\ud83d\\ude21',\n  'pouting_cat':'\\ud83d\\ude3e',\n  'pouting_man':'\\ud83d\\ude4e&zwj;\\u2642\\ufe0f',\n  'pray':'\\ud83d\\ude4f',\n  'prayer_beads':'\\ud83d\\udcff',\n  'pregnant_woman':'\\ud83e\\udd30',\n  'previous_track_button':'\\u23ee',\n  'prince':'\\ud83e\\udd34',\n  'princess':'\\ud83d\\udc78',\n  'printer':'\\ud83d\\udda8',\n  'purple_heart':'\\ud83d\\udc9c',\n  'purse':'\\ud83d\\udc5b',\n  'pushpin':'\\ud83d\\udccc',\n  'put_litter_in_its_place':'\\ud83d\\udeae',\n  'question':'\\u2753',\n  'rabbit':'\\ud83d\\udc30',\n  'rabbit2':'\\ud83d\\udc07',\n  'racehorse':'\\ud83d\\udc0e',\n  'racing_car':'\\ud83c\\udfce',\n  'radio':'\\ud83d\\udcfb',\n  'radio_button':'\\ud83d\\udd18',\n  'radioactive':'\\u2622\\ufe0f',\n  'railway_car':'\\ud83d\\ude83',\n  'railway_track':'\\ud83d\\udee4',\n  'rainbow':'\\ud83c\\udf08',\n  'rainbow_flag':'\\ud83c\\udff3\\ufe0f&zwj;\\ud83c\\udf08',\n  'raised_back_of_hand':'\\ud83e\\udd1a',\n  'raised_hand_with_fingers_splayed':'\\ud83d\\udd90',\n  'raised_hands':'\\ud83d\\ude4c',\n  'raising_hand_woman':'\\ud83d\\ude4b',\n  'raising_hand_man':'\\ud83d\\ude4b&zwj;\\u2642\\ufe0f',\n  'ram':'\\ud83d\\udc0f',\n  'ramen':'\\ud83c\\udf5c',\n  'rat':'\\ud83d\\udc00',\n  'record_button':'\\u23fa',\n  'recycle':'\\u267b\\ufe0f',\n  'red_circle':'\\ud83d\\udd34',\n  'registered':'\\u00ae\\ufe0f',\n  'relaxed':'\\u263a\\ufe0f',\n  'relieved':'\\ud83d\\ude0c',\n  'reminder_ribbon':'\\ud83c\\udf97',\n  'repeat':'\\ud83d\\udd01',\n  'repeat_one':'\\ud83d\\udd02',\n  'rescue_worker_helmet':'\\u26d1',\n  'restroom':'\\ud83d\\udebb',\n  'revolving_hearts':'\\ud83d\\udc9e',\n  'rewind':'\\u23ea',\n  'rhinoceros':'\\ud83e\\udd8f',\n  'ribbon':'\\ud83c\\udf80',\n  'rice':'\\ud83c\\udf5a',\n  'rice_ball':'\\ud83c\\udf59',\n  'rice_cracker':'\\ud83c\\udf58',\n  'rice_scene':'\\ud83c\\udf91',\n  'right_anger_bubble':'\\ud83d\\uddef',\n  'ring':'\\ud83d\\udc8d',\n  'robot':'\\ud83e\\udd16',\n  'rocket':'\\ud83d\\ude80',\n  'rofl':'\\ud83e\\udd23',\n  'roll_eyes':'\\ud83d\\ude44',\n  'roller_coaster':'\\ud83c\\udfa2',\n  'rooster':'\\ud83d\\udc13',\n  'rose':'\\ud83c\\udf39',\n  'rosette':'\\ud83c\\udff5',\n  'rotating_light':'\\ud83d\\udea8',\n  'round_pushpin':'\\ud83d\\udccd',\n  'rowing_man':'\\ud83d\\udea3',\n  'rowing_woman':'\\ud83d\\udea3&zwj;\\u2640\\ufe0f',\n  'rugby_football':'\\ud83c\\udfc9',\n  'running_man':'\\ud83c\\udfc3',\n  'running_shirt_with_sash':'\\ud83c\\udfbd',\n  'running_woman':'\\ud83c\\udfc3&zwj;\\u2640\\ufe0f',\n  'sa':'\\ud83c\\ude02\\ufe0f',\n  'sagittarius':'\\u2650\\ufe0f',\n  'sake':'\\ud83c\\udf76',\n  'sandal':'\\ud83d\\udc61',\n  'santa':'\\ud83c\\udf85',\n  'satellite':'\\ud83d\\udce1',\n  'saxophone':'\\ud83c\\udfb7',\n  'school':'\\ud83c\\udfeb',\n  'school_satchel':'\\ud83c\\udf92',\n  'scissors':'\\u2702\\ufe0f',\n  'scorpion':'\\ud83e\\udd82',\n  'scorpius':'\\u264f\\ufe0f',\n  'scream':'\\ud83d\\ude31',\n  'scream_cat':'\\ud83d\\ude40',\n  'scroll':'\\ud83d\\udcdc',\n  'seat':'\\ud83d\\udcba',\n  'secret':'\\u3299\\ufe0f',\n  'see_no_evil':'\\ud83d\\ude48',\n  'seedling':'\\ud83c\\udf31',\n  'selfie':'\\ud83e\\udd33',\n  'shallow_pan_of_food':'\\ud83e\\udd58',\n  'shamrock':'\\u2618\\ufe0f',\n  'shark':'\\ud83e\\udd88',\n  'shaved_ice':'\\ud83c\\udf67',\n  'sheep':'\\ud83d\\udc11',\n  'shell':'\\ud83d\\udc1a',\n  'shield':'\\ud83d\\udee1',\n  'shinto_shrine':'\\u26e9',\n  'ship':'\\ud83d\\udea2',\n  'shirt':'\\ud83d\\udc55',\n  'shopping':'\\ud83d\\udecd',\n  'shopping_cart':'\\ud83d\\uded2',\n  'shower':'\\ud83d\\udebf',\n  'shrimp':'\\ud83e\\udd90',\n  'signal_strength':'\\ud83d\\udcf6',\n  'six_pointed_star':'\\ud83d\\udd2f',\n  'ski':'\\ud83c\\udfbf',\n  'skier':'\\u26f7',\n  'skull':'\\ud83d\\udc80',\n  'skull_and_crossbones':'\\u2620\\ufe0f',\n  'sleeping':'\\ud83d\\ude34',\n  'sleeping_bed':'\\ud83d\\udecc',\n  'sleepy':'\\ud83d\\ude2a',\n  'slightly_frowning_face':'\\ud83d\\ude41',\n  'slightly_smiling_face':'\\ud83d\\ude42',\n  'slot_machine':'\\ud83c\\udfb0',\n  'small_airplane':'\\ud83d\\udee9',\n  'small_blue_diamond':'\\ud83d\\udd39',\n  'small_orange_diamond':'\\ud83d\\udd38',\n  'small_red_triangle':'\\ud83d\\udd3a',\n  'small_red_triangle_down':'\\ud83d\\udd3b',\n  'smile':'\\ud83d\\ude04',\n  'smile_cat':'\\ud83d\\ude38',\n  'smiley':'\\ud83d\\ude03',\n  'smiley_cat':'\\ud83d\\ude3a',\n  'smiling_imp':'\\ud83d\\ude08',\n  'smirk':'\\ud83d\\ude0f',\n  'smirk_cat':'\\ud83d\\ude3c',\n  'smoking':'\\ud83d\\udeac',\n  'snail':'\\ud83d\\udc0c',\n  'snake':'\\ud83d\\udc0d',\n  'sneezing_face':'\\ud83e\\udd27',\n  'snowboarder':'\\ud83c\\udfc2',\n  'snowflake':'\\u2744\\ufe0f',\n  'snowman':'\\u26c4\\ufe0f',\n  'snowman_with_snow':'\\u2603\\ufe0f',\n  'sob':'\\ud83d\\ude2d',\n  'soccer':'\\u26bd\\ufe0f',\n  'soon':'\\ud83d\\udd1c',\n  'sos':'\\ud83c\\udd98',\n  'sound':'\\ud83d\\udd09',\n  'space_invader':'\\ud83d\\udc7e',\n  'spades':'\\u2660\\ufe0f',\n  'spaghetti':'\\ud83c\\udf5d',\n  'sparkle':'\\u2747\\ufe0f',\n  'sparkler':'\\ud83c\\udf87',\n  'sparkles':'\\u2728',\n  'sparkling_heart':'\\ud83d\\udc96',\n  'speak_no_evil':'\\ud83d\\ude4a',\n  'speaker':'\\ud83d\\udd08',\n  'speaking_head':'\\ud83d\\udde3',\n  'speech_balloon':'\\ud83d\\udcac',\n  'speedboat':'\\ud83d\\udea4',\n  'spider':'\\ud83d\\udd77',\n  'spider_web':'\\ud83d\\udd78',\n  'spiral_calendar':'\\ud83d\\uddd3',\n  'spiral_notepad':'\\ud83d\\uddd2',\n  'spoon':'\\ud83e\\udd44',\n  'squid':'\\ud83e\\udd91',\n  'stadium':'\\ud83c\\udfdf',\n  'star':'\\u2b50\\ufe0f',\n  'star2':'\\ud83c\\udf1f',\n  'star_and_crescent':'\\u262a\\ufe0f',\n  'star_of_david':'\\u2721\\ufe0f',\n  'stars':'\\ud83c\\udf20',\n  'station':'\\ud83d\\ude89',\n  'statue_of_liberty':'\\ud83d\\uddfd',\n  'steam_locomotive':'\\ud83d\\ude82',\n  'stew':'\\ud83c\\udf72',\n  'stop_button':'\\u23f9',\n  'stop_sign':'\\ud83d\\uded1',\n  'stopwatch':'\\u23f1',\n  'straight_ruler':'\\ud83d\\udccf',\n  'strawberry':'\\ud83c\\udf53',\n  'stuck_out_tongue':'\\ud83d\\ude1b',\n  'stuck_out_tongue_closed_eyes':'\\ud83d\\ude1d',\n  'stuck_out_tongue_winking_eye':'\\ud83d\\ude1c',\n  'studio_microphone':'\\ud83c\\udf99',\n  'stuffed_flatbread':'\\ud83e\\udd59',\n  'sun_behind_large_cloud':'\\ud83c\\udf25',\n  'sun_behind_rain_cloud':'\\ud83c\\udf26',\n  'sun_behind_small_cloud':'\\ud83c\\udf24',\n  'sun_with_face':'\\ud83c\\udf1e',\n  'sunflower':'\\ud83c\\udf3b',\n  'sunglasses':'\\ud83d\\ude0e',\n  'sunny':'\\u2600\\ufe0f',\n  'sunrise':'\\ud83c\\udf05',\n  'sunrise_over_mountains':'\\ud83c\\udf04',\n  'surfing_man':'\\ud83c\\udfc4',\n  'surfing_woman':'\\ud83c\\udfc4&zwj;\\u2640\\ufe0f',\n  'sushi':'\\ud83c\\udf63',\n  'suspension_railway':'\\ud83d\\ude9f',\n  'sweat':'\\ud83d\\ude13',\n  'sweat_drops':'\\ud83d\\udca6',\n  'sweat_smile':'\\ud83d\\ude05',\n  'sweet_potato':'\\ud83c\\udf60',\n  'swimming_man':'\\ud83c\\udfca',\n  'swimming_woman':'\\ud83c\\udfca&zwj;\\u2640\\ufe0f',\n  'symbols':'\\ud83d\\udd23',\n  'synagogue':'\\ud83d\\udd4d',\n  'syringe':'\\ud83d\\udc89',\n  'taco':'\\ud83c\\udf2e',\n  'tada':'\\ud83c\\udf89',\n  'tanabata_tree':'\\ud83c\\udf8b',\n  'taurus':'\\u2649\\ufe0f',\n  'taxi':'\\ud83d\\ude95',\n  'tea':'\\ud83c\\udf75',\n  'telephone_receiver':'\\ud83d\\udcde',\n  'telescope':'\\ud83d\\udd2d',\n  'tennis':'\\ud83c\\udfbe',\n  'tent':'\\u26fa\\ufe0f',\n  'thermometer':'\\ud83c\\udf21',\n  'thinking':'\\ud83e\\udd14',\n  'thought_balloon':'\\ud83d\\udcad',\n  'ticket':'\\ud83c\\udfab',\n  'tickets':'\\ud83c\\udf9f',\n  'tiger':'\\ud83d\\udc2f',\n  'tiger2':'\\ud83d\\udc05',\n  'timer_clock':'\\u23f2',\n  'tipping_hand_man':'\\ud83d\\udc81&zwj;\\u2642\\ufe0f',\n  'tired_face':'\\ud83d\\ude2b',\n  'tm':'\\u2122\\ufe0f',\n  'toilet':'\\ud83d\\udebd',\n  'tokyo_tower':'\\ud83d\\uddfc',\n  'tomato':'\\ud83c\\udf45',\n  'tongue':'\\ud83d\\udc45',\n  'top':'\\ud83d\\udd1d',\n  'tophat':'\\ud83c\\udfa9',\n  'tornado':'\\ud83c\\udf2a',\n  'trackball':'\\ud83d\\uddb2',\n  'tractor':'\\ud83d\\ude9c',\n  'traffic_light':'\\ud83d\\udea5',\n  'train':'\\ud83d\\ude8b',\n  'train2':'\\ud83d\\ude86',\n  'tram':'\\ud83d\\ude8a',\n  'triangular_flag_on_post':'\\ud83d\\udea9',\n  'triangular_ruler':'\\ud83d\\udcd0',\n  'trident':'\\ud83d\\udd31',\n  'triumph':'\\ud83d\\ude24',\n  'trolleybus':'\\ud83d\\ude8e',\n  'trophy':'\\ud83c\\udfc6',\n  'tropical_drink':'\\ud83c\\udf79',\n  'tropical_fish':'\\ud83d\\udc20',\n  'truck':'\\ud83d\\ude9a',\n  'trumpet':'\\ud83c\\udfba',\n  'tulip':'\\ud83c\\udf37',\n  'tumbler_glass':'\\ud83e\\udd43',\n  'turkey':'\\ud83e\\udd83',\n  'turtle':'\\ud83d\\udc22',\n  'tv':'\\ud83d\\udcfa',\n  'twisted_rightwards_arrows':'\\ud83d\\udd00',\n  'two_hearts':'\\ud83d\\udc95',\n  'two_men_holding_hands':'\\ud83d\\udc6c',\n  'two_women_holding_hands':'\\ud83d\\udc6d',\n  'u5272':'\\ud83c\\ude39',\n  'u5408':'\\ud83c\\ude34',\n  'u55b6':'\\ud83c\\ude3a',\n  'u6307':'\\ud83c\\ude2f\\ufe0f',\n  'u6708':'\\ud83c\\ude37\\ufe0f',\n  'u6709':'\\ud83c\\ude36',\n  'u6e80':'\\ud83c\\ude35',\n  'u7121':'\\ud83c\\ude1a\\ufe0f',\n  'u7533':'\\ud83c\\ude38',\n  'u7981':'\\ud83c\\ude32',\n  'u7a7a':'\\ud83c\\ude33',\n  'umbrella':'\\u2614\\ufe0f',\n  'unamused':'\\ud83d\\ude12',\n  'underage':'\\ud83d\\udd1e',\n  'unicorn':'\\ud83e\\udd84',\n  'unlock':'\\ud83d\\udd13',\n  'up':'\\ud83c\\udd99',\n  'upside_down_face':'\\ud83d\\ude43',\n  'v':'\\u270c\\ufe0f',\n  'vertical_traffic_light':'\\ud83d\\udea6',\n  'vhs':'\\ud83d\\udcfc',\n  'vibration_mode':'\\ud83d\\udcf3',\n  'video_camera':'\\ud83d\\udcf9',\n  'video_game':'\\ud83c\\udfae',\n  'violin':'\\ud83c\\udfbb',\n  'virgo':'\\u264d\\ufe0f',\n  'volcano':'\\ud83c\\udf0b',\n  'volleyball':'\\ud83c\\udfd0',\n  'vs':'\\ud83c\\udd9a',\n  'vulcan_salute':'\\ud83d\\udd96',\n  'walking_man':'\\ud83d\\udeb6',\n  'walking_woman':'\\ud83d\\udeb6&zwj;\\u2640\\ufe0f',\n  'waning_crescent_moon':'\\ud83c\\udf18',\n  'waning_gibbous_moon':'\\ud83c\\udf16',\n  'warning':'\\u26a0\\ufe0f',\n  'wastebasket':'\\ud83d\\uddd1',\n  'watch':'\\u231a\\ufe0f',\n  'water_buffalo':'\\ud83d\\udc03',\n  'watermelon':'\\ud83c\\udf49',\n  'wave':'\\ud83d\\udc4b',\n  'wavy_dash':'\\u3030\\ufe0f',\n  'waxing_crescent_moon':'\\ud83c\\udf12',\n  'wc':'\\ud83d\\udebe',\n  'weary':'\\ud83d\\ude29',\n  'wedding':'\\ud83d\\udc92',\n  'weight_lifting_man':'\\ud83c\\udfcb\\ufe0f',\n  'weight_lifting_woman':'\\ud83c\\udfcb\\ufe0f&zwj;\\u2640\\ufe0f',\n  'whale':'\\ud83d\\udc33',\n  'whale2':'\\ud83d\\udc0b',\n  'wheel_of_dharma':'\\u2638\\ufe0f',\n  'wheelchair':'\\u267f\\ufe0f',\n  'white_check_mark':'\\u2705',\n  'white_circle':'\\u26aa\\ufe0f',\n  'white_flag':'\\ud83c\\udff3\\ufe0f',\n  'white_flower':'\\ud83d\\udcae',\n  'white_large_square':'\\u2b1c\\ufe0f',\n  'white_medium_small_square':'\\u25fd\\ufe0f',\n  'white_medium_square':'\\u25fb\\ufe0f',\n  'white_small_square':'\\u25ab\\ufe0f',\n  'white_square_button':'\\ud83d\\udd33',\n  'wilted_flower':'\\ud83e\\udd40',\n  'wind_chime':'\\ud83c\\udf90',\n  'wind_face':'\\ud83c\\udf2c',\n  'wine_glass':'\\ud83c\\udf77',\n  'wink':'\\ud83d\\ude09',\n  'wolf':'\\ud83d\\udc3a',\n  'woman':'\\ud83d\\udc69',\n  'woman_artist':'\\ud83d\\udc69&zwj;\\ud83c\\udfa8',\n  'woman_astronaut':'\\ud83d\\udc69&zwj;\\ud83d\\ude80',\n  'woman_cartwheeling':'\\ud83e\\udd38&zwj;\\u2640\\ufe0f',\n  'woman_cook':'\\ud83d\\udc69&zwj;\\ud83c\\udf73',\n  'woman_facepalming':'\\ud83e\\udd26&zwj;\\u2640\\ufe0f',\n  'woman_factory_worker':'\\ud83d\\udc69&zwj;\\ud83c\\udfed',\n  'woman_farmer':'\\ud83d\\udc69&zwj;\\ud83c\\udf3e',\n  'woman_firefighter':'\\ud83d\\udc69&zwj;\\ud83d\\ude92',\n  'woman_health_worker':'\\ud83d\\udc69&zwj;\\u2695\\ufe0f',\n  'woman_judge':'\\ud83d\\udc69&zwj;\\u2696\\ufe0f',\n  'woman_juggling':'\\ud83e\\udd39&zwj;\\u2640\\ufe0f',\n  'woman_mechanic':'\\ud83d\\udc69&zwj;\\ud83d\\udd27',\n  'woman_office_worker':'\\ud83d\\udc69&zwj;\\ud83d\\udcbc',\n  'woman_pilot':'\\ud83d\\udc69&zwj;\\u2708\\ufe0f',\n  'woman_playing_handball':'\\ud83e\\udd3e&zwj;\\u2640\\ufe0f',\n  'woman_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2640\\ufe0f',\n  'woman_scientist':'\\ud83d\\udc69&zwj;\\ud83d\\udd2c',\n  'woman_shrugging':'\\ud83e\\udd37&zwj;\\u2640\\ufe0f',\n  'woman_singer':'\\ud83d\\udc69&zwj;\\ud83c\\udfa4',\n  'woman_student':'\\ud83d\\udc69&zwj;\\ud83c\\udf93',\n  'woman_teacher':'\\ud83d\\udc69&zwj;\\ud83c\\udfeb',\n  'woman_technologist':'\\ud83d\\udc69&zwj;\\ud83d\\udcbb',\n  'woman_with_turban':'\\ud83d\\udc73&zwj;\\u2640\\ufe0f',\n  'womans_clothes':'\\ud83d\\udc5a',\n  'womans_hat':'\\ud83d\\udc52',\n  'women_wrestling':'\\ud83e\\udd3c&zwj;\\u2640\\ufe0f',\n  'womens':'\\ud83d\\udeba',\n  'world_map':'\\ud83d\\uddfa',\n  'worried':'\\ud83d\\ude1f',\n  'wrench':'\\ud83d\\udd27',\n  'writing_hand':'\\u270d\\ufe0f',\n  'x':'\\u274c',\n  'yellow_heart':'\\ud83d\\udc9b',\n  'yen':'\\ud83d\\udcb4',\n  'yin_yang':'\\u262f\\ufe0f',\n  'yum':'\\ud83d\\ude0b',\n  'zap':'\\u26a1\\ufe0f',\n  'zipper_mouth_face':'\\ud83e\\udd10',\n  'zzz':'\\ud83d\\udca4',\n\n  /* special emojis :P */\n  'octocat':  '<img alt=\":octocat:\" height=\"20\" width=\"20\" align=\"absmiddle\" src=\"https://assets-cdn.github.com/images/icons/emoji/octocat.png\">',\n  'showdown': '<span style=\"font-family: \\'Anonymous Pro\\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>'\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor,\n\n      /**\n       * Metadata of the document\n       * @type {{parsed: {}, raw: string, format: string}}\n       */\n      metadata = {\n        parsed: {},\n        raw: '',\n        format: ''\n      };\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n        // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    [],\n      metadata: {\n        parsed: {},\n        raw: '',\n        format: ''\n      }\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces\n    text = text.replace(/\\u00A0/g, '&nbsp;');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('metadata')(text, options, globals);\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // render a complete html document instead of a partial if the option is enabled\n    text = showdown.subParser('completeHTMLDocument')(text, options, globals);\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // update metadata\n    metadata = globals.metadata;\n    return text;\n  };\n\n  /**\n   * Converts an HTML string into a markdown string\n   * @param src\n   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.\n   * @returns {string}\n   */\n  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {\n\n    // replace \\r\\n with \\n\n    src = src.replace(/\\r\\n/g, '\\n');\n    src = src.replace(/\\r/g, '\\n'); // old macs\n\n    // due to an edge case, we need to find this: > <\n    // to prevent removing of non silent white spaces\n    // ex: <em>this is</em> <strong>sparta</strong>\n    src = src.replace(/>[ \\t]+</, '>¨NBSP;<');\n\n    if (!HTMLParser) {\n      if (window && window.document) {\n        HTMLParser = window.document;\n      } else {\n        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');\n      }\n    }\n\n    var doc = HTMLParser.createElement('div');\n    doc.innerHTML = src;\n\n    var globals = {\n      preList: substitutePreCodeTags(doc)\n    };\n\n    // remove all newlines and collapse spaces\n    clean(doc);\n\n    // some stuff, like accidental reference links must now be escaped\n    // TODO\n    // doc.innerHTML = doc.innerHTML.replace(/\\[[\\S\\t ]]/);\n\n    var nodes = doc.childNodes,\n        mdDoc = '';\n\n    for (var i = 0; i < nodes.length; i++) {\n      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);\n    }\n\n    function clean (node) {\n      for (var n = 0; n < node.childNodes.length; ++n) {\n        var child = node.childNodes[n];\n        if (child.nodeType === 3) {\n          if (!/\\S/.test(child.nodeValue)) {\n            node.removeChild(child);\n            --n;\n          } else {\n            child.nodeValue = child.nodeValue.split('\\n').join(' ');\n            child.nodeValue = child.nodeValue.replace(/(\\s)+/g, '$1');\n          }\n        } else if (child.nodeType === 1) {\n          clean(child);\n        }\n      }\n    }\n\n    // find all pre tags and replace contents with placeholder\n    // we need this so that we can remove all indentation from html\n    // to ease up parsing\n    function substitutePreCodeTags (doc) {\n\n      var pres = doc.querySelectorAll('pre'),\n          presPH = [];\n\n      for (var i = 0; i < pres.length; ++i) {\n\n        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {\n          var content = pres[i].firstChild.innerHTML.trim(),\n              language = pres[i].firstChild.getAttribute('data-language') || '';\n\n          // if data-language attribute is not defined, then we look for class language-*\n          if (language === '') {\n            var classes = pres[i].firstChild.className.split(' ');\n            for (var c = 0; c < classes.length; ++c) {\n              var matches = classes[c].match(/^language-(.+)$/);\n              if (matches !== null) {\n                language = matches[1];\n                break;\n              }\n            }\n          }\n\n          // unescape html entities in content\n          content = showdown.helper.unescapeHTMLEntities(content);\n\n          presPH.push(content);\n          pres[i].outerHTML = '<precode language=\"' + language + '\" precodenum=\"' + i.toString() + '\"></precode>';\n        } else {\n          presPH.push(pres[i].innerHTML);\n          pres[i].innerHTML = '';\n          pres[i].setAttribute('prenum', i.toString());\n        }\n      }\n      return presPH;\n    }\n\n    return mdDoc;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n\n  /**\n   * Get the metadata of the previously parsed document\n   * @param raw\n   * @returns {string|{}}\n   */\n  this.getMetadata = function (raw) {\n    if (raw) {\n      return metadata.raw;\n    } else {\n      return metadata.parsed;\n    }\n  };\n\n  /**\n   * Get the metadata format of the previously parsed document\n   * @returns {string}\n   */\n  this.getMetadataFormat = function () {\n    return metadata.format;\n  };\n\n  /**\n   * Private: set a single key, value metadata pair\n   * @param {string} key\n   * @param {string} value\n   */\n  this._setMetadataPair = function (key, value) {\n    metadata.parsed[key] = value;\n  };\n\n  /**\n   * Private: set metadata format\n   * @param {string} format\n   */\n  this._setMetadataFormat = function (format) {\n    metadata.format = format;\n  };\n\n  /**\n   * Private: set metadata raw text\n   * @param {string} raw\n   */\n  this._setMetadataRaw = function (raw) {\n    metadata.raw = raw;\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\n    if (showdown.helper.isUndefined(title)) {\n      title = '';\n    }\n    linkId = linkId.toLowerCase();\n\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n    } else if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    // optionLinksInNewWindow only applies\n    // to external links. Hash links (#) open in same page\n    if (options.openLinksInNewWindow && !/^#/.test(url)) {\n      // escaped _\n      result += ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // normal cases\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d]+(?:[a-z\\d.-]+?[a-z\\d]+)*))/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username),\n          target = '';\n      if (options.openLinksInNewWindow) {\n        target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n      }\n      return st + '<a href=\"' + lnk + '\"' + target + '>' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\n// url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\n\nvar simpleURLRegex  = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+?\\.[^'\">\\s]+?)()(\\1)?(?=\\s|$)(?![\"<>])/gi,\n    simpleURLRegex2 = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]])?(\\1)?(?=\\s|$)(?![\"<>])/gi,\n    delimUrlRegex   = /()<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>()/gi,\n    simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n    delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n\n    replaceLink = function (options) {\n      'use strict';\n      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {\n        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n        var lnkTxt = link,\n            append = '',\n            target = '',\n            lmc    = leadingMagicChars || '',\n            tmc    = trailingMagicChars || '';\n        if (/^www\\./i.test(link)) {\n          link = link.replace(/^www\\./i, 'http://www.');\n        }\n        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n          append = trailingPunctuation;\n        }\n        if (options.openLinksInNewWindow) {\n          target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n        }\n        return lmc + '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append + tmc;\n      };\n    },\n\n    replaceMail = function (options, globals) {\n      'use strict';\n      return function (wholeMatch, b, mail) {\n        var href = 'mailto:';\n        b = b || '';\n        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n        if (options.encodeEmails) {\n          href = showdown.helper.encodeEmailAddress(href + mail);\n          mail = showdown.helper.encodeEmailAddress(mail);\n        } else {\n          href = href + mail;\n        }\n        return b + '<a href=\"' + href + '\">' + mail + '</a>';\n      };\n    };\n\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  text = text.replace(delimUrlRegex, replaceLink(options));\n  text = text.replace(delimMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\nshowdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\n  'use strict';\n\n  if (!options.simplifiedAutoLink) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\n\n  if (options.excludeTrailingPunctuationFromURLs) {\n    text = text.replace(simpleURLRegex2, replaceLink(options));\n  } else {\n    text = text.replace(simpleURLRegex, replaceLink(options));\n  }\n  text = text.replace(simpleMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  // add a couple extra lines after the text and endtext mark\n  text = text + '\\n\\n';\n\n  var rgx = /(^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+/gm;\n\n  if (options.splitAdjacentBlockquotes) {\n    rgx = /^ {0,3}>[\\s\\S]*?(?:\\n\\n)/gm;\n  }\n\n  text = text.replace(rgx, function (bq) {\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, ''); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof text === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      c = m1 + '<code>' + c + '</code>';\n      c = showdown.subParser('hashHTMLSpans')(c, options, globals);\n      return c;\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Create a full HTML document from the processed markdown\n */\nshowdown.subParser('completeHTMLDocument', function (text, options, globals) {\n  'use strict';\n\n  if (!options.completeHTMLDocument) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);\n\n  var doctype = 'html',\n      doctypeParsed = '<!DOCTYPE HTML>\\n',\n      title = '',\n      charset = '<meta charset=\"utf-8\">\\n',\n      lang = '',\n      metadata = '';\n\n  if (typeof globals.metadata.parsed.doctype !== 'undefined') {\n    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\\n';\n    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();\n    if (doctype === 'html' || doctype === 'html5') {\n      charset = '<meta charset=\"utf-8\">';\n    }\n  }\n\n  for (var meta in globals.metadata.parsed) {\n    if (globals.metadata.parsed.hasOwnProperty(meta)) {\n      switch (meta.toLowerCase()) {\n        case 'doctype':\n          break;\n\n        case 'title':\n          title = '<title>' +  globals.metadata.parsed.title + '</title>\\n';\n          break;\n\n        case 'charset':\n          if (doctype === 'html' || doctype === 'html5') {\n            charset = '<meta charset=\"' + globals.metadata.parsed.charset + '\">\\n';\n          } else {\n            charset = '<meta name=\"charset\" content=\"' + globals.metadata.parsed.charset + '\">\\n';\n          }\n          break;\n\n        case 'language':\n        case 'lang':\n          lang = ' lang=\"' + globals.metadata.parsed[meta] + '\"';\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n          break;\n\n        default:\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n      }\n    }\n  }\n\n  text = doctypeParsed + '<html' + lang + '>\\n<head>\\n' + title + charset + metadata + '</head>\\n<body>\\n' + text.trim() + '\\n</body>\\n</html>';\n\n  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('ellipsis', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('ellipsis.before', text, options, globals);\n\n  text = text.replace(/\\.\\.\\./g, '…');\n\n  text = globals.converter._dispatch('ellipsis.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Turn emoji codes into emojis\n *\n * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis\n */\nshowdown.subParser('emoji', function (text, options, globals) {\n  'use strict';\n\n  if (!options.emoji) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('emoji.before', text, options, globals);\n\n  var emojiRgx = /:([\\S]+?):/g;\n\n  text = text.replace(emojiRgx, function (wm, emojiCode) {\n    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {\n      return showdown.helper.emojis[emojiCode];\n    }\n    return wm;\n  });\n\n  text = globals.converter._dispatch('emoji.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags.\n  var tags     = /<\\/?[a-z\\d_:-]+(?:[\\s]+[\\s\\S]+?)?>/gi,\n      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;\n\n  text = text.replace(tags, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = text.replace(comments, function (wholeMatch) {\n    return wholeMatch\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)(?: {0,3})(```+|~~~+)(?: *)([^\\s`~]*)\\n([\\s\\S]*?)\\n(?: {0,3})\\1/g, function (wholeMatch, delim, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  if (options.backslashEscapesHTMLTags) {\n    // encode backslash escaped HTML tags\n    text = text.replace(/\\\\<(\\/?[^>]+?)>/g, function (wm, inside) {\n      return '&lt;' + inside + '&gt;';\n    });\n  }\n\n  // hash HTML Blocks\n  for (var i = 0; i < blockTags.length; ++i) {\n\n    var opTagPos,\n        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\\\b[^>]*>)', 'im'),\n        patLeft  = '<' + blockTags[i] + '\\\\b[^>]*>',\n        patRight = '</' + blockTags[i] + '>';\n    // 1. Look for the first position of the first opening HTML tag in the text\n    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\n\n      // if the HTML tag is \\ escaped, we need to escape it and break\n\n\n      //2. Split the text in that position\n      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\n          //3. Match recursively\n          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');\n\n      // prevent an infinite loop\n      if (newSubText1 === subTexts[1]) {\n        break;\n      }\n      text = subTexts[0].concat(newSubText1);\n    }\n  }\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        console.error('maximum nesting of 10 spans reached!!!');\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n\n      // Set text-style headers:\n      //\tHeader 1\n      //\t========\n      //\n      //\tHeader 2\n      //\t--------\n      //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var hText = m2;\n    if (options.customizedHeaderId) {\n      hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\n    }\n\n    var span = showdown.subParser('spanGamut')(hText, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title,\n        prefix;\n\n    // It is separate from other options to allow combining prefix and customized\n    if (options.customizedHeaderId) {\n      var match = m.match(/\\{([^{]+?)}\\s*$/);\n      if (match && match[1]) {\n        m = match[1];\n      }\n    }\n\n    title = m;\n\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      prefix = options.prefixHeaderId;\n    } else if (options.prefixHeaderId === true) {\n      prefix = 'section-';\n    } else {\n      prefix = '';\n    }\n\n    if (!options.rawPrefixHeaderId) {\n      title = prefix + title;\n    }\n\n    if (options.ghCompatibleHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else if (options.rawHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '&')\n        .replace(/¨T/g, '¨')\n        .replace(/¨D/g, '$')\n        // replace \" and '\n        .replace(/[\"']/g, '-')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (options.rawPrefixHeaderId) {\n      title = prefix + title;\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      crazyRegExp       = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\n      base64RegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      referenceRegExp   = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[([\\s\\S]*?)]()()()()()/g,\n      refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\n\n  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {\n    url = url.replace(/\\s/g, '');\n    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);\n  }\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n\n    } else if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title && showdown.helper.isString(title)) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n\n  // base64 encoded images\n  text = text.replace(base64RegExp, writeImageTagBase64);\n\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(crazyRegExp, writeImageTag);\n\n  // normal cases\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  // handle reference-style shortcuts: ![img text]\n  text = text.replace(refShortcutRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  function parseInside (txt, left, right) {\n    /*\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    */\n    return left + txt + right;\n  }\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong>', '</strong>');\n    });\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\n      return parseInside (txt, '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n  // Now parse asterisks\n  if (options.literalMidWordAsterisks) {\n    text = text.replace(/([^*]|^)\\B\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/([^*]|^)\\B\\*\\*(\\S[\\s\\S]*?)\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<strong>', '</strong>');\n    });\n    text = text.replace(/([^*]|^)\\B\\*(\\S[\\s\\S]*?)\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n      // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  function styleStartNumber (list, listType) {\n    // check if ol and starts by a number different than 1\n    if (listType === 'ol') {\n      var res = list.match(/^ *(\\d+)\\./);\n      if (res && res[1] !== '1') {\n        return ' start=\"' + res[1] + '\"';\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg),\n            style = styleStartNumber(list, listType);\n        if (pos !== -1) {\n          // slice\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      var style = styleStartNumber(list, listType);\n      result = '\\n\\n<' + listType + style + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  /** Start of list parsing **/\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Parse metadata at the top of the document\n */\nshowdown.subParser('metadata', function (text, options, globals) {\n  'use strict';\n\n  if (!options.metadata) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('metadata.before', text, options, globals);\n\n  function parseMetadataContents (content) {\n    // raw is raw so it's not changed in any way\n    globals.metadata.raw = content;\n\n    // escape chars forbidden in html attributes\n    // double quotes\n    content = content\n      // ampersand first\n      .replace(/&/g, '&amp;')\n      // double quotes\n      .replace(/\"/g, '&quot;');\n\n    content = content.replace(/\\n {4}/g, ' ');\n    content.replace(/^([\\S ]+): +([\\s\\S]+?)$/gm, function (wm, key, value) {\n      globals.metadata.parsed[key] = value;\n      return '';\n    });\n  }\n\n  text = text.replace(/^\\s*«««+(\\S*?)\\n([\\s\\S]+?)\\n»»»+\\n/, function (wholematch, format, content) {\n    parseMetadataContents(content);\n    return '¨M';\n  });\n\n  text = text.replace(/^\\s*---+(\\S*?)\\n([\\s\\S]+?)\\n---+\\n/, function (wholematch, format, content) {\n    if (format) {\n      globals.metadata.format = format;\n    }\n    parseMetadataContents(content);\n    return '¨M';\n  });\n\n  text = text.replace(/¨M/g, '');\n\n  text = globals.converter._dispatch('metadata.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after anchors, because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\n  text = showdown.subParser('emoji')(text, options, globals);\n  text = showdown.subParser('underline')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n  text = showdown.subParser('ellipsis')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    // only add line breaks if the text does not contain a block (special case for lists)\n    if (!/\\n\\n¨K/.test(text)) {\n      text = text.replace(/\\n+/g, '<br />\\n');\n    }\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  function parseInside (txt) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return '<del>' + txt + '</del>';\n  }\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex       = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm,\n      base64Regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n\\n|(?=¨0)|(?=\\n\\[))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    if (url.match(/^data:.+?\\/.+?;base64,/)) {\n      // remove newlines\n      globals.gUrls[linkId] = url.replace(/\\s/g, '');\n    } else {\n      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n    }\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  };\n\n  // first we try to find base64 link references\n  text = text.replace(base64Regex, replaceFunc);\n\n  text = text.replace(regex, replaceFunc);\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx       = /^ {0,3}\\|?.+\\|.+\\n {0,3}\\|?[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm,\n      //singeColTblRgx = /^ {0,3}\\|.+\\|\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n(?: {0,3}\\|.+\\|\\n)+(?:\\n\\n|¨0)/gm;\n      singeColTblRgx = /^ {0,3}\\|.+\\|[ \\t]*\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n( {0,3}\\|.+\\|[ \\t]*\\n)*(?:\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility\n    if (options.tablesHeaderId || options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  function parseTable (rawTable) {\n    var i, tableLines = rawTable.split('\\n');\n\n    for (i = 0; i < tableLines.length; ++i) {\n      // strip wrong first and last column if wrapped tables are used\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n      // parse code spans first, but we only support one line code spans\n      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  // find escaped pipe characters\n  text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback);\n\n  // parse multi column tables\n  text = text.replace(tableRgx, parseTable);\n\n  // parse one column tables\n  text = text.replace(singeColTblRgx, parseTable);\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('underline', function (text, options, globals) {\n  'use strict';\n\n  if (!options.underline) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('underline.before', text, options, globals);\n\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n      return '<u>' + txt + '</u>';\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n      return '<u>' + txt + '</u>';\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\n    });\n  }\n\n  // escape remaining underscores to prevent them being parsed by italic and bold\n  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('underline.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('makeMarkdown.blockquote', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; ++i) {\n      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);\n\n      if (innerTxt === '') {\n        continue;\n      }\n      txt += innerTxt;\n    }\n  }\n  // cleanup\n  txt = txt.trim();\n  txt = '> ' + txt.split('\\n').join('\\n> ');\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.codeBlock', function (node, globals) {\n  'use strict';\n\n  var lang = node.getAttribute('language'),\n      num  = node.getAttribute('precodenum');\n  return '```' + lang + '\\n' + globals.preList[num] + '\\n```';\n});\n\r\nshowdown.subParser('makeMarkdown.codeSpan', function (node) {\n  'use strict';\n\n  return '`' + node.innerHTML + '`';\n});\n\r\nshowdown.subParser('makeMarkdown.emphasis', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '*';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '*';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {\n  'use strict';\n\n  var headerMark = new Array(headerLevel + 1).join('#'),\n      txt = '';\n\n  if (node.hasChildNodes()) {\n    txt = headerMark + ' ';\n    var children = node.childNodes,\n        childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.hr', function () {\n  'use strict';\n\n  return '---';\n});\n\r\nshowdown.subParser('makeMarkdown.image', function (node) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasAttribute('src')) {\n    txt += '![' + node.getAttribute('alt') + '](';\n    txt += '<' + node.getAttribute('src') + '>';\n    if (node.hasAttribute('width') && node.hasAttribute('height')) {\n      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');\n    }\n\n    if (node.hasAttribute('title')) {\n      txt += ' \"' + node.getAttribute('title') + '\"';\n    }\n    txt += ')';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.links', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes() && node.hasAttribute('href')) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n    txt = '[';\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '](';\n    txt += '<' + node.getAttribute('href') + '>';\n    if (node.hasAttribute('title')) {\n      txt += ' \"' + node.getAttribute('title') + '\"';\n    }\n    txt += ')';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.list', function (node, globals, type) {\n  'use strict';\n\n  var txt = '';\n  if (!node.hasChildNodes()) {\n    return '';\n  }\n  var listItems       = node.childNodes,\n      listItemsLenght = listItems.length,\n      listNum = node.getAttribute('start') || 1;\n\n  for (var i = 0; i < listItemsLenght; ++i) {\n    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {\n      continue;\n    }\n\n    // define the bullet to use in list\n    var bullet = '';\n    if (type === 'ol') {\n      bullet = listNum.toString() + '. ';\n    } else {\n      bullet = '- ';\n    }\n\n    // parse list item\n    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);\n    ++listNum;\n  }\n\n  // add comment at the end to prevent consecutive lists to be parsed as one\n  txt += '\\n<!-- -->\\n';\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.listItem', function (node, globals) {\n  'use strict';\n\n  var listItemTxt = '';\n\n  var children = node.childNodes,\n      childrenLenght = children.length;\n\n  for (var i = 0; i < childrenLenght; ++i) {\n    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n  }\n  // if it's only one liner, we need to add a newline at the end\n  if (!/\\n$/.test(listItemTxt)) {\n    listItemTxt += '\\n';\n  } else {\n    // it's multiparagraph, so we need to indent\n    listItemTxt = listItemTxt\n      .split('\\n')\n      .join('\\n    ')\n      .replace(/^ {4}$/gm, '')\n      .replace(/\\n\\n+/g, '\\n\\n');\n  }\n\n  return listItemTxt;\n});\n\r\n\n\nshowdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {\n  'use strict';\n\n  spansOnly = spansOnly || false;\n\n  var txt = '';\n\n  // edge case of text without wrapper paragraph\n  if (node.nodeType === 3) {\n    return showdown.subParser('makeMarkdown.txt')(node, globals);\n  }\n\n  // HTML comment\n  if (node.nodeType === 8) {\n    return '<!--' + node.data + '-->\\n\\n';\n  }\n\n  // process only node elements\n  if (node.nodeType !== 1) {\n    return '';\n  }\n\n  var tagName = node.tagName.toLowerCase();\n\n  switch (tagName) {\n\n    //\n    // BLOCKS\n    //\n    case 'h1':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\\n\\n'; }\n      break;\n    case 'h2':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\\n\\n'; }\n      break;\n    case 'h3':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\\n\\n'; }\n      break;\n    case 'h4':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\\n\\n'; }\n      break;\n    case 'h5':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\\n\\n'; }\n      break;\n    case 'h6':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\\n\\n'; }\n      break;\n\n    case 'p':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'blockquote':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'hr':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'ol':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\\n\\n'; }\n      break;\n\n    case 'ul':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\\n\\n'; }\n      break;\n\n    case 'precode':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'pre':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'table':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\\n\\n'; }\n      break;\n\n    //\n    // SPANS\n    //\n    case 'code':\n      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);\n      break;\n\n    case 'em':\n    case 'i':\n      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);\n      break;\n\n    case 'strong':\n    case 'b':\n      txt = showdown.subParser('makeMarkdown.strong')(node, globals);\n      break;\n\n    case 'del':\n      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);\n      break;\n\n    case 'a':\n      txt = showdown.subParser('makeMarkdown.links')(node, globals);\n      break;\n\n    case 'img':\n      txt = showdown.subParser('makeMarkdown.image')(node, globals);\n      break;\n\n    default:\n      txt = node.outerHTML + '\\n\\n';\n  }\n\n  // common normalization\n  // TODO eventually\n\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.paragraph', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n  }\n\n  // some text normalization\n  txt = txt.trim();\n\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.pre', function (node, globals) {\n  'use strict';\n\n  var num  = node.getAttribute('prenum');\n  return '<pre>' + globals.preList[num] + '</pre>';\n});\n\r\nshowdown.subParser('makeMarkdown.strikethrough', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '~~';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '~~';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.strong', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '**';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '**';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.table', function (node, globals) {\n  'use strict';\n\n  var txt = '',\n      tableArray = [[], []],\n      headings   = node.querySelectorAll('thead>tr>th'),\n      rows       = node.querySelectorAll('tbody>tr'),\n      i, ii;\n  for (i = 0; i < headings.length; ++i) {\n    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),\n        allign = '---';\n\n    if (headings[i].hasAttribute('style')) {\n      var style = headings[i].getAttribute('style').toLowerCase().replace(/\\s/g, '');\n      switch (style) {\n        case 'text-align:left;':\n          allign = ':---';\n          break;\n        case 'text-align:right;':\n          allign = '---:';\n          break;\n        case 'text-align:center;':\n          allign = ':---:';\n          break;\n      }\n    }\n    tableArray[0][i] = headContent.trim();\n    tableArray[1][i] = allign;\n  }\n\n  for (i = 0; i < rows.length; ++i) {\n    var r = tableArray.push([]) - 1,\n        cols = rows[i].getElementsByTagName('td');\n\n    for (ii = 0; ii < headings.length; ++ii) {\n      var cellContent = ' ';\n      if (typeof cols[ii] !== 'undefined') {\n        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);\n      }\n      tableArray[r].push(cellContent);\n    }\n  }\n\n  var cellSpacesCount = 3;\n  for (i = 0; i < tableArray.length; ++i) {\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\n      var strLen = tableArray[i][ii].length;\n      if (strLen > cellSpacesCount) {\n        cellSpacesCount = strLen;\n      }\n    }\n  }\n\n  for (i = 0; i < tableArray.length; ++i) {\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\n      if (i === 1) {\n        if (tableArray[i][ii].slice(-1) === ':') {\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';\n        } else {\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');\n        }\n      } else {\n        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);\n      }\n    }\n    txt += '| ' + tableArray[i].join(' | ') + ' |\\n';\n  }\n\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.tableCell', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (!node.hasChildNodes()) {\n    return '';\n  }\n  var children = node.childNodes,\n      childrenLength = children.length;\n\n  for (var i = 0; i < childrenLength; ++i) {\n    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);\n  }\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.txt', function (node) {\n  'use strict';\n\n  var txt = node.nodeValue;\n\n  // multiple spaces are collapsed\n  txt = txt.replace(/ +/g, ' ');\n\n  // replace the custom ¨NBSP; with a space\n  txt = txt.replace(/¨NBSP;/g, ' ');\n\n  // \", <, > and & should replace escaped html entities\n  txt = showdown.helper.unescapeHTMLEntities(txt);\n\n  // escape markdown magic characters\n  // emphasis, strong and strikethrough - can appear everywhere\n  // we also escape pipe (|) because of tables\n  // and escape ` because of code blocks and spans\n  txt = txt.replace(/([*_~|`])/g, '\\\\$1');\n\n  // escape > because of blockquotes\n  txt = txt.replace(/^(\\s*)>/g, '\\\\$1>');\n\n  // hash character, only troublesome at the beginning of a line because of headers\n  txt = txt.replace(/^#/gm, '\\\\#');\n\n  // horizontal rules\n  txt = txt.replace(/^(\\s*)([-=]{3,})(\\s*)$/, '$1\\\\$2$3');\n\n  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer\n  txt = txt.replace(/^( {0,3}\\d+)\\./gm, '$1\\\\.');\n\n  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)\n  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\\\$2');\n\n  // images and links, ] followed by ( is problematic, so we escape it\n  txt = txt.replace(/]([\\s]*)\\(/g, '\\\\]$1\\\\(');\n\n  // reference URIs must also be escaped\n  txt = txt.replace(/^ {0,3}\\[([\\S \\t]*?)]:/gm, '\\\\[$1]:');\n\n  return txt;\n});\n\r\nvar root = this;\n\n// AMD Loader\nif (typeof define === 'function' && define.amd) {\n  define(function () {\n    'use strict';\n    return showdown;\n  });\n\n// CommonJS/nodeJS Loader\n} else if (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'vex-breadcrumb',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n  styles: [],\r\n  host: {\r\n    class: 'vex-breadcrumb body-2 text-hint leading-none hover:text-primary-500 no-underline trans-ease-out ltr:mr-2 rtl:ml-2'\r\n  }\r\n})\r\nexport class BreadcrumbComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport icHome from '@iconify/icons-ic/twotone-home';\r\nimport { trackByValue } from '../../utils/track-by';\r\n\r\n@Component({\r\n  selector: 'vex-breadcrumbs',\r\n  template: `\r\n      <div class=\"flex items-center\">\r\n          <vex-breadcrumb>\r\n              <a [routerLink]=\"['/']\">\r\n                  <ic-icon [icon]=\"icHome\" inline=\"true\" size=\"20px\"></ic-icon>\r\n              </a>\r\n          </vex-breadcrumb>\r\n          <ng-container *ngFor=\"let crumb of crumbs; trackBy: trackByValue\">\r\n              <div class=\"w-1 h-1 bg-gray-300 rounded-full ltr:mr-2 rtl:ml-2\"></div>\r\n              <vex-breadcrumb>\r\n                  <a [routerLink]=\"[]\">{{ crumb }}</a>\r\n              </vex-breadcrumb>\r\n          </ng-container>\r\n      </div>\r\n  `\r\n})\r\nexport class BreadcrumbsComponent implements OnInit {\r\n\r\n  @Input() crumbs: string[] = [];\r\n\r\n  trackByValue = trackByValue;\r\n  icHome = icHome;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { BreadcrumbComponent } from './breadcrumb/breadcrumb.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatIconModule,\r\n    FlexLayoutModule,\r\n    IconModule\r\n  ],\r\n  declarations: [BreadcrumbsComponent, BreadcrumbComponent],\r\n  exports: [BreadcrumbsComponent]\r\n})\r\nexport class BreadcrumbsModule {\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[vexPageLayoutContent],vex-page-layout-content',\r\n  host: {\r\n    class: 'vex-page-layout-content'\r\n  }\r\n})\r\nexport class PageLayoutContentDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[vexPageLayoutHeader],vex-page-layout-header',\r\n  host: {\r\n    class: 'vex-page-layout-header'\r\n  }\r\n})\r\nexport class PageLayoutHeaderDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n\r\n","export default \".vex-page-layout {\\n  display: block;\\n}\\n\\n.vex-page-layout-simple .vex-page-layout-content {\\n  padding-bottom: var(--padding-gutter);\\n  padding-top: var(--padding-gutter);\\n}\\n\\n.vex-page-layout-card {\\n  padding-bottom: var(--padding);\\n}\\n\\n.vex-page-layout-card .vex-page-layout-header {\\n  margin-bottom: calc(var(--page-layout-toolbar-height) * -1);\\n  padding-bottom: var(--page-layout-toolbar-height);\\n}\\n\\n.vex-page-layout-card .vex-page-layout-content > * > .mat-tab-group .mat-tab-label,\\n.vex-page-layout-card .vex-page-layout-content > .mat-tab-group .mat-tab-label {\\n  height: var(--page-layout-toolbar-height);\\n}\\n\\n.vex-page-layout-card .vex-page-layout-content > * > .mat-tab-group .mat-tab-label.mat-tab-label-active,\\n.vex-page-layout-card .vex-page-layout-content > .mat-tab-group .mat-tab-label.mat-tab-label-active {\\n  opacity: 1;\\n}\\n\\n.vex-page-layout-header {\\n  align-items: center;\\n  background-color: #5c77ff;\\n  color: #FFF;\\n  box-sizing: content-box !important;\\n  display: flex;\\n  flex-direction: row;\\n  height: calc(var(--page-layout-header-height) - var(--page-layout-toolbar-height));\\n  padding-left: var(--padding);\\n  padding-right: var(--padding);\\n  place-content: center flex-start;\\n}\\n\\n.vex-page-layout-header .vex-breadcrumb {\\n  color: #FFF;\\n  opacity: 0.5;\\n}\\n\\n.vex-page-layout-header .vex-breadcrumb:hover {\\n  color: #FFF;\\n  opacity: 1;\\n}\\n\\n.vex-page-layout-content {\\n  box-sizing: border-box;\\n  display: block;\\n  padding-left: var(--padding-gutter);\\n  padding-right: var(--padding-gutter);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9AdmV4L2NvbXBvbmVudHMvcGFnZS1sYXlvdXQvRDpcXERvY3VtZW50c1xcUHJvamVjdHNcXHZpbmN1bGFjaW9uLmdpdGh1Yi5pby9zcmNcXEB2ZXhcXGNvbXBvbmVudHNcXHBhZ2UtbGF5b3V0XFxwYWdlLWxheW91dC5jb21wb25lbnQuc2NzcyIsInNyYy9AdmV4L2NvbXBvbmVudHMvcGFnZS1sYXlvdXQvcGFnZS1sYXlvdXQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0FDQ0Y7O0FERUE7RUFDRSxxQ0FBQTtFQUNBLGtDQUFBO0FDQ0Y7O0FERUE7RUFDRSw4QkFBQTtBQ0NGOztBREVBO0VBQ0UsMkRBQUE7RUFDQSxpREFBQTtBQ0NGOztBREVBOztFQUVFLHlDQUFBO0FDQ0Y7O0FERUE7O0VBRUUsVUFBQTtBQ0NGOztBREVBO0VBQ0UsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7RUFDQSxrQ0FBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGtGQUFBO0VBQ0EsNEJBQUE7RUFDQSw2QkFBQTtFQUNBLGdDQUFBO0FDQ0Y7O0FERUE7RUFDRSxXQUFBO0VBQ0EsWUFBQTtBQ0NGOztBREVBO0VBQ0UsV0FBQTtFQUNBLFVBQUE7QUNDRjs7QURFQTtFQUNFLHNCQUFBO0VBQ0EsY0FBQTtFQUNBLG1DQUFBO0VBQ0Esb0NBQUE7QUNDRiIsImZpbGUiOiJzcmMvQHZleC9jb21wb25lbnRzL3BhZ2UtbGF5b3V0L3BhZ2UtbGF5b3V0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnZleC1wYWdlLWxheW91dCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4udmV4LXBhZ2UtbGF5b3V0LXNpbXBsZSAudmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQge1xuICBwYWRkaW5nLWJvdHRvbTogdmFyKC0tcGFkZGluZy1ndXR0ZXIpO1xuICBwYWRkaW5nLXRvcDogdmFyKC0tcGFkZGluZy1ndXR0ZXIpO1xufVxuXG4udmV4LXBhZ2UtbGF5b3V0LWNhcmQge1xuICBwYWRkaW5nLWJvdHRvbTogdmFyKC0tcGFkZGluZyk7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtY2FyZCAudmV4LXBhZ2UtbGF5b3V0LWhlYWRlciB7XG4gIG1hcmdpbi1ib3R0b206IGNhbGModmFyKC0tcGFnZS1sYXlvdXQtdG9vbGJhci1oZWlnaHQpICogLTEpO1xuICBwYWRkaW5nLWJvdHRvbTogdmFyKC0tcGFnZS1sYXlvdXQtdG9vbGJhci1oZWlnaHQpO1xufVxuXG4udmV4LXBhZ2UtbGF5b3V0LWNhcmQgLnZleC1wYWdlLWxheW91dC1jb250ZW50ID4gKiA+IC5tYXQtdGFiLWdyb3VwIC5tYXQtdGFiLWxhYmVsLFxuLnZleC1wYWdlLWxheW91dC1jYXJkIC52ZXgtcGFnZS1sYXlvdXQtY29udGVudCA+IC5tYXQtdGFiLWdyb3VwIC5tYXQtdGFiLWxhYmVsIHtcbiAgaGVpZ2h0OiB2YXIoLS1wYWdlLWxheW91dC10b29sYmFyLWhlaWdodCk7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtY2FyZCAudmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgPiAqID4gLm1hdC10YWItZ3JvdXAgLm1hdC10YWItbGFiZWwubWF0LXRhYi1sYWJlbC1hY3RpdmUsXG4udmV4LXBhZ2UtbGF5b3V0LWNhcmQgLnZleC1wYWdlLWxheW91dC1jb250ZW50ID4gLm1hdC10YWItZ3JvdXAgLm1hdC10YWItbGFiZWwubWF0LXRhYi1sYWJlbC1hY3RpdmUge1xuICBvcGFjaXR5OiAxO1xufVxuXG4udmV4LXBhZ2UtbGF5b3V0LWhlYWRlciB7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1Yzc3ZmY7XG4gIGNvbG9yOiAjRkZGO1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveCAhaW1wb3J0YW50O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBoZWlnaHQ6IGNhbGModmFyKC0tcGFnZS1sYXlvdXQtaGVhZGVyLWhlaWdodCkgLSB2YXIoLS1wYWdlLWxheW91dC10b29sYmFyLWhlaWdodCkpO1xuICBwYWRkaW5nLWxlZnQ6IHZhcigtLXBhZGRpbmcpO1xuICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS1wYWRkaW5nKTtcbiAgcGxhY2UtY29udGVudDogY2VudGVyIGZsZXgtc3RhcnQ7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtaGVhZGVyIC52ZXgtYnJlYWRjcnVtYiB7XG4gIGNvbG9yOiAjRkZGO1xuICBvcGFjaXR5OiAwLjU7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtaGVhZGVyIC52ZXgtYnJlYWRjcnVtYjpob3ZlciB7XG4gIGNvbG9yOiAjRkZGO1xuICBvcGFjaXR5OiAxO1xufVxuXG4udmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZy1sZWZ0OiB2YXIoLS1wYWRkaW5nLWd1dHRlcik7XG4gIHBhZGRpbmctcmlnaHQ6IHZhcigtLXBhZGRpbmctZ3V0dGVyKTtcbn0iLCIudmV4LXBhZ2UtbGF5b3V0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtc2ltcGxlIC52ZXgtcGFnZS1sYXlvdXQtY29udGVudCB7XG4gIHBhZGRpbmctYm90dG9tOiB2YXIoLS1wYWRkaW5nLWd1dHRlcik7XG4gIHBhZGRpbmctdG9wOiB2YXIoLS1wYWRkaW5nLWd1dHRlcik7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtY2FyZCB7XG4gIHBhZGRpbmctYm90dG9tOiB2YXIoLS1wYWRkaW5nKTtcbn1cblxuLnZleC1wYWdlLWxheW91dC1jYXJkIC52ZXgtcGFnZS1sYXlvdXQtaGVhZGVyIHtcbiAgbWFyZ2luLWJvdHRvbTogY2FsYyh2YXIoLS1wYWdlLWxheW91dC10b29sYmFyLWhlaWdodCkgKiAtMSk7XG4gIHBhZGRpbmctYm90dG9tOiB2YXIoLS1wYWdlLWxheW91dC10b29sYmFyLWhlaWdodCk7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtY2FyZCAudmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgPiAqID4gLm1hdC10YWItZ3JvdXAgLm1hdC10YWItbGFiZWwsXG4udmV4LXBhZ2UtbGF5b3V0LWNhcmQgLnZleC1wYWdlLWxheW91dC1jb250ZW50ID4gLm1hdC10YWItZ3JvdXAgLm1hdC10YWItbGFiZWwge1xuICBoZWlnaHQ6IHZhcigtLXBhZ2UtbGF5b3V0LXRvb2xiYXItaGVpZ2h0KTtcbn1cblxuLnZleC1wYWdlLWxheW91dC1jYXJkIC52ZXgtcGFnZS1sYXlvdXQtY29udGVudCA+ICogPiAubWF0LXRhYi1ncm91cCAubWF0LXRhYi1sYWJlbC5tYXQtdGFiLWxhYmVsLWFjdGl2ZSxcbi52ZXgtcGFnZS1sYXlvdXQtY2FyZCAudmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgPiAubWF0LXRhYi1ncm91cCAubWF0LXRhYi1sYWJlbC5tYXQtdGFiLWxhYmVsLWFjdGl2ZSB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtaGVhZGVyIHtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVjNzdmZjtcbiAgY29sb3I6ICNGRkY7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94ICFpbXBvcnRhbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGhlaWdodDogY2FsYyh2YXIoLS1wYWdlLWxheW91dC1oZWFkZXItaGVpZ2h0KSAtIHZhcigtLXBhZ2UtbGF5b3V0LXRvb2xiYXItaGVpZ2h0KSk7XG4gIHBhZGRpbmctbGVmdDogdmFyKC0tcGFkZGluZyk7XG4gIHBhZGRpbmctcmlnaHQ6IHZhcigtLXBhZGRpbmcpO1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXIgZmxleC1zdGFydDtcbn1cblxuLnZleC1wYWdlLWxheW91dC1oZWFkZXIgLnZleC1icmVhZGNydW1iIHtcbiAgY29sb3I6ICNGRkY7XG4gIG9wYWNpdHk6IDAuNTtcbn1cblxuLnZleC1wYWdlLWxheW91dC1oZWFkZXIgLnZleC1icmVhZGNydW1iOmhvdmVyIHtcbiAgY29sb3I6ICNGRkY7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi52ZXgtcGFnZS1sYXlvdXQtY29udGVudCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nLWxlZnQ6IHZhcigtLXBhZGRpbmctZ3V0dGVyKTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tcGFkZGluZy1ndXR0ZXIpO1xufSJdfQ== */\"","import { Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'vex-page-layout',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    class: 'vex-page-layout'\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./page-layout.component.scss']\r\n})\r\nexport class PageLayoutComponent {\r\n\r\n  @Input() mode: 'card' | 'simple' = 'simple';\r\n\r\n  constructor() { }\r\n\r\n  @HostBinding('class.vex-page-layout-card')\r\n  get isCard() {\r\n    return this.mode === 'card';\r\n  }\r\n\r\n  @HostBinding('class.vex-page-layout-simple')\r\n  get isSimple() {\r\n    return this.mode === 'simple';\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PageLayoutComponent } from './page-layout.component';\r\nimport { PageLayoutHeaderDirective } from './page-layout-header.directive';\r\nimport { PageLayoutContentDirective } from './page-layout-content.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [PageLayoutComponent, PageLayoutHeaderDirective, PageLayoutContentDirective],\r\n  exports: [PageLayoutComponent, PageLayoutHeaderDirective, PageLayoutContentDirective]\r\n})\r\nexport class PageLayoutModule {\r\n}\r\n","export default \".secondary-toolbar {\\n  background: var(--secondary-toolbar-background);\\n  height: var(--secondary-toolbar-height);\\n  margin-top: calc(var(--secondary-toolbar-height) * -1);\\n}\\n\\n.secondary-toolbar.fixed {\\n  width: var(--toolbar-width);\\n}\\n\\n.secondary-toolbar-placeholder {\\n  height: var(--secondary-toolbar-height);\\n}\\n\\n::ng-deep .is-mobile .fixed {\\n  width: 100%;\\n}\\n\\n::ng-deep body .fixed {\\n  width: calc(100% - var(--sidenav-width));\\n}\\n\\n::ng-deep vex-breadcrumbs {\\n  display: none;\\n}\\n\\n@media (min-width: 600px) {\\n  ::ng-deep vex-breadcrumbs {\\n    display: block;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9AdmV4L2NvbXBvbmVudHMvc2Vjb25kYXJ5LXRvb2xiYXIvRDpcXERvY3VtZW50c1xcUHJvamVjdHNcXHZpbmN1bGFjaW9uLmdpdGh1Yi5pby9zcmNcXEB2ZXhcXGNvbXBvbmVudHNcXHNlY29uZGFyeS10b29sYmFyXFxzZWNvbmRhcnktdG9vbGJhci5jb21wb25lbnQuc2NzcyIsInNyYy9AdmV4L2NvbXBvbmVudHMvc2Vjb25kYXJ5LXRvb2xiYXIvc2Vjb25kYXJ5LXRvb2xiYXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwrQ0FBQTtFQUNBLHVDQUFBO0VBQ0Esc0RBQUE7QUNDRjs7QURFQTtFQUNFLDJCQUFBO0FDQ0Y7O0FERUE7RUFDRSx1Q0FBQTtBQ0NGOztBREVBO0VBQ0UsV0FBQTtBQ0NGOztBREVBO0VBQ0Usd0NBQUE7QUNDRjs7QURFQTtFQUNFLGFBQUE7QUNDRjs7QURFQTtFQUNFO0lBQ0UsY0FBQTtFQ0NGO0FBQ0YiLCJmaWxlIjoic3JjL0B2ZXgvY29tcG9uZW50cy9zZWNvbmRhcnktdG9vbGJhci9zZWNvbmRhcnktdG9vbGJhci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zZWNvbmRhcnktdG9vbGJhciB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeS10b29sYmFyLWJhY2tncm91bmQpO1xuICBoZWlnaHQ6IHZhcigtLXNlY29uZGFyeS10b29sYmFyLWhlaWdodCk7XG4gIG1hcmdpbi10b3A6IGNhbGModmFyKC0tc2Vjb25kYXJ5LXRvb2xiYXItaGVpZ2h0KSAqIC0xKTtcbn1cblxuLnNlY29uZGFyeS10b29sYmFyLmZpeGVkIHtcbiAgd2lkdGg6IHZhcigtLXRvb2xiYXItd2lkdGgpO1xufVxuXG4uc2Vjb25kYXJ5LXRvb2xiYXItcGxhY2Vob2xkZXIge1xuICBoZWlnaHQ6IHZhcigtLXNlY29uZGFyeS10b29sYmFyLWhlaWdodCk7XG59XG5cbjo6bmctZGVlcCAuaXMtbW9iaWxlIC5maXhlZCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG46Om5nLWRlZXAgYm9keSAuZml4ZWQge1xuICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tc2lkZW5hdi13aWR0aCkpO1xufVxuXG46Om5nLWRlZXAgdmV4LWJyZWFkY3J1bWJzIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gIDo6bmctZGVlcCB2ZXgtYnJlYWRjcnVtYnMge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG59IiwiLnNlY29uZGFyeS10b29sYmFyIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tc2Vjb25kYXJ5LXRvb2xiYXItYmFja2dyb3VuZCk7XG4gIGhlaWdodDogdmFyKC0tc2Vjb25kYXJ5LXRvb2xiYXItaGVpZ2h0KTtcbiAgbWFyZ2luLXRvcDogY2FsYyh2YXIoLS1zZWNvbmRhcnktdG9vbGJhci1oZWlnaHQpICogLTEpO1xufVxuXG4uc2Vjb25kYXJ5LXRvb2xiYXIuZml4ZWQge1xuICB3aWR0aDogdmFyKC0tdG9vbGJhci13aWR0aCk7XG59XG5cbi5zZWNvbmRhcnktdG9vbGJhci1wbGFjZWhvbGRlciB7XG4gIGhlaWdodDogdmFyKC0tc2Vjb25kYXJ5LXRvb2xiYXItaGVpZ2h0KTtcbn1cblxuOjpuZy1kZWVwIC5pcy1tb2JpbGUgLmZpeGVkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbjo6bmctZGVlcCBib2R5IC5maXhlZCB7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1zaWRlbmF2LXdpZHRoKSk7XG59XG5cbjo6bmctZGVlcCB2ZXgtYnJlYWRjcnVtYnMge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgOjpuZy1kZWVwIHZleC1icmVhZGNydW1icyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbn0iXX0= */\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ConfigService } from '../../services/config.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'vex-secondary-toolbar',\r\n  templateUrl: './secondary-toolbar.component.html',\r\n  styleUrls: ['./secondary-toolbar.component.scss']\r\n})\r\nexport class SecondaryToolbarComponent implements OnInit {\r\n\r\n  @Input() current: string;\r\n  @Input() crumbs: string[];\r\n\r\n  fixed$ = this.configService.config$.pipe(\r\n    map(config => config.toolbar.fixed)\r\n  );\r\n\r\n  constructor(private configService: ConfigService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SecondaryToolbarComponent } from './secondary-toolbar.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { BreadcrumbsModule } from '../breadcrumbs/breadcrumbs.module';\r\nimport { ContainerModule } from '../../directives/container/container.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [SecondaryToolbarComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    IconModule,\r\n    RouterModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    BreadcrumbsModule,\r\n    ContainerModule\r\n  ],\r\n  exports: [SecondaryToolbarComponent]\r\n})\r\nexport class SecondaryToolbarModule {\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { DocumentationComponent } from './documentation.component';\r\nimport { VexRoutes } from '../../../@vex/interfaces/vex-route.interface';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: 'changelog',\r\n    loadChildren: () => import('./changelog/changelog.module').then(m => m.ChangelogModule),\r\n    data: {\r\n      containerEnabled: true,\r\n    },\r\n  },\r\n  {\r\n    path: '',\r\n    data: {\r\n      containerEnabled: true,\r\n    },\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'introduction'\r\n      },\r\n      {\r\n        path: 'introduction',\r\n        component: DocumentationComponent,\r\n      },\r\n      {\r\n        path: 'folder-structure',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'installation',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'changing-styling-and-css-variables',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'using-custom-colors-for-the-primarysecondarywarn-palettes',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'build-for-production',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'start-development-server',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'further-help',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'configuration',\r\n        component: DocumentationComponent\r\n      },\r\n      {\r\n        path: 'adding-menu-items',\r\n        component: DocumentationComponent\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DocumentationRoutingModule {\r\n}\r\n","export default \"::ng-deep vex-documentation vex-page-layout-content showdown a {\\n  color: #5c77ff;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content showdown > *:first-child {\\n  margin-top: 0 !important;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content h1, ::ng-deep vex-documentation vex-page-layout-content h2 {\\n  border-bottom: 1px solid var(--foreground-divider);\\n  padding-bottom: 0.3em;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content h1, ::ng-deep vex-documentation vex-page-layout-content h2, ::ng-deep vex-documentation vex-page-layout-content h3, ::ng-deep vex-documentation vex-page-layout-content h4, ::ng-deep vex-documentation vex-page-layout-content h5, ::ng-deep vex-documentation vex-page-layout-content h6 {\\n  font-weight: var(--font-weight-medium) !important;\\n  margin-bottom: var(--padding-16);\\n  margin-top: 32px;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content p, ::ng-deep vex-documentation vex-page-layout-content ul, ::ng-deep vex-documentation vex-page-layout-content li {\\n  font-size: 15px !important;\\n  line-height: 1.5 !important;\\n  margin: 1rem 0;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content strong {\\n  font-weight: 500;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content code.typescript {\\n  display: block;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table {\\n  border: 1px solid var(--foreground-divider);\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n  font-size: 15px;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table tr {\\n  background-color: var(--background-card);\\n  border-top: 1px solid var(--foreground-divider);\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table tr:nth-child(2n) {\\n  background-color: var(--background-app-bar);\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table td, ::ng-deep vex-documentation vex-page-layout-content table th {\\n  border-left: 1px solid var(--foreground-divider);\\n  padding: var(--padding-12) var(--padding-16);\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table td:first-child, ::ng-deep vex-documentation vex-page-layout-content table th:first-child {\\n  border-left: none;\\n}\\n\\n::ng-deep vex-documentation vex-page-layout-content table th {\\n  font-weight: var(--font-weight-medium);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZG9jdW1lbnRhdGlvbi9EOlxcRG9jdW1lbnRzXFxQcm9qZWN0c1xcdmluY3VsYWNpb24uZ2l0aHViLmlvL3NyY1xcYXBwXFxwYWdlc1xcZG9jdW1lbnRhdGlvblxcZG9jdW1lbnRhdGlvbi5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZG9jdW1lbnRhdGlvbi9kb2N1bWVudGF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBQTtBQ0NGOztBREVBO0VBQ0Usd0JBQUE7QUNDRjs7QURFQTtFQUNFLGtEQUFBO0VBQ0EscUJBQUE7QUNDRjs7QURFQTtFQUNFLGlEQUFBO0VBQ0EsZ0NBQUE7RUFDQSxnQkFBQTtBQ0NGOztBREVBO0VBQ0UsMEJBQUE7RUFDQSwyQkFBQTtFQUNBLGNBQUE7QUNDRjs7QURFQTtFQUNFLGdCQUFBO0FDQ0Y7O0FERUE7RUFDRSxjQUFBO0FDQ0Y7O0FERUE7RUFDRSwyQ0FBQTtFQUNBLHlCQUFBO0VBQ0EsaUJBQUE7RUFDQSxlQUFBO0FDQ0Y7O0FERUE7RUFDRSx3Q0FBQTtFQUNBLCtDQUFBO0FDQ0Y7O0FERUE7RUFDRSwyQ0FBQTtBQ0NGOztBREVBO0VBQ0UsZ0RBQUE7RUFDQSw0Q0FBQTtBQ0NGOztBREVBO0VBQ0UsaUJBQUE7QUNDRjs7QURFQTtFQUNFLHNDQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9kb2N1bWVudGF0aW9uL2RvY3VtZW50YXRpb24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgc2hvd2Rvd24gYSB7XG4gIGNvbG9yOiAjNWM3N2ZmO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgc2hvd2Rvd24gPiAqOmZpcnN0LWNoaWxkIHtcbiAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDEsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBoMiB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1mb3JlZ3JvdW5kLWRpdmlkZXIpO1xuICBwYWRkaW5nLWJvdHRvbTogMC4zZW07XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBoMSwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGgyLCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDMsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBoNCwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGg1LCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDYge1xuICBmb250LXdlaWdodDogdmFyKC0tZm9udC13ZWlnaHQtbWVkaXVtKSAhaW1wb3J0YW50O1xuICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLTE2KTtcbiAgbWFyZ2luLXRvcDogMzJweDtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHAsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB1bCwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGxpIHtcbiAgZm9udC1zaXplOiAxNXB4ICFpbXBvcnRhbnQ7XG4gIGxpbmUtaGVpZ2h0OiAxLjUgIWltcG9ydGFudDtcbiAgbWFyZ2luOiAxcmVtIDA7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBzdHJvbmcge1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgY29kZS50eXBlc2NyaXB0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWZvcmVncm91bmQtZGl2aWRlcik7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xuICBmb250LXNpemU6IDE1cHg7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB0ciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY2FyZCk7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1mb3JlZ3JvdW5kLWRpdmlkZXIpO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdGFibGUgdHI6bnRoLWNoaWxkKDJuKSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtYXBwLWJhcik7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB0ZCwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHRhYmxlIHRoIHtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1mb3JlZ3JvdW5kLWRpdmlkZXIpO1xuICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLTEyKSB2YXIoLS1wYWRkaW5nLTE2KTtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHRhYmxlIHRkOmZpcnN0LWNoaWxkLCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdGFibGUgdGg6Zmlyc3QtY2hpbGQge1xuICBib3JkZXItbGVmdDogbm9uZTtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHRhYmxlIHRoIHtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLWZvbnQtd2VpZ2h0LW1lZGl1bSk7XG59IiwiOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHNob3dkb3duIGEge1xuICBjb2xvcjogIzVjNzdmZjtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHNob3dkb3duID4gKjpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGgxLCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDIge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZm9yZWdyb3VuZC1kaXZpZGVyKTtcbiAgcGFkZGluZy1ib3R0b206IDAuM2VtO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDEsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBoMiwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGgzLCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgaDQsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBoNSwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGg2IHtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLWZvbnQtd2VpZ2h0LW1lZGl1bSkgIWltcG9ydGFudDtcbiAgbWFyZ2luLWJvdHRvbTogdmFyKC0tcGFkZGluZy0xNik7XG4gIG1hcmdpbi10b3A6IDMycHg7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBwLCA6Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdWwsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCBsaSB7XG4gIGZvbnQtc2l6ZTogMTVweCAhaW1wb3J0YW50O1xuICBsaW5lLWhlaWdodDogMS41ICFpbXBvcnRhbnQ7XG4gIG1hcmdpbjogMXJlbSAwO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IGNvZGUudHlwZXNjcmlwdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdGFibGUge1xuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1mb3JlZ3JvdW5kLWRpdmlkZXIpO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbiAgZm9udC1zaXplOiAxNXB4O1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdGFibGUgdHIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNhcmQpO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tZm9yZWdyb3VuZC1kaXZpZGVyKTtcbn1cblxuOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHRhYmxlIHRyOm50aC1jaGlsZCgybikge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWFwcC1iYXIpO1xufVxuXG46Om5nLWRlZXAgdmV4LWRvY3VtZW50YXRpb24gdmV4LXBhZ2UtbGF5b3V0LWNvbnRlbnQgdGFibGUgdGQsIDo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB0aCB7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgdmFyKC0tZm9yZWdyb3VuZC1kaXZpZGVyKTtcbiAgcGFkZGluZzogdmFyKC0tcGFkZGluZy0xMikgdmFyKC0tcGFkZGluZy0xNik7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB0ZDpmaXJzdC1jaGlsZCwgOjpuZy1kZWVwIHZleC1kb2N1bWVudGF0aW9uIHZleC1wYWdlLWxheW91dC1jb250ZW50IHRhYmxlIHRoOmZpcnN0LWNoaWxkIHtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG59XG5cbjo6bmctZGVlcCB2ZXgtZG9jdW1lbnRhdGlvbiB2ZXgtcGFnZS1sYXlvdXQtY29udGVudCB0YWJsZSB0aCB7XG4gIGZvbnQtd2VpZ2h0OiB2YXIoLS1mb250LXdlaWdodC1tZWRpdW0pO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\n\r\n@Component({\r\n  selector: 'vex-documentation',\r\n  templateUrl: './documentation.component.html',\r\n  styleUrls: ['./documentation.component.scss']\r\n})\r\nexport class DocumentationComponent implements OnInit {\r\n\r\n  icMoreVert = icMoreVert;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DocumentationRoutingModule } from './documentation-routing.module';\r\nimport { DocumentationComponent } from './documentation.component';\r\nimport { PageLayoutModule } from '../../../@vex/components/page-layout/page-layout.module';\r\nimport { SecondaryToolbarModule } from '../../../@vex/components/secondary-toolbar/secondary-toolbar.module';\r\nimport { BreadcrumbsModule } from '../../../@vex/components/breadcrumbs/breadcrumbs.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MarkdownModule } from './markdown.module';\r\nimport { ContainerModule } from '../../../@vex/directives/container/container.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DocumentationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DocumentationRoutingModule,\r\n    PageLayoutModule,\r\n    SecondaryToolbarModule,\r\n    BreadcrumbsModule,\r\n    MatIconModule,\r\n    IconModule,\r\n    MatButtonModule,\r\n    FlexLayoutModule,\r\n    MarkdownModule,\r\n    ContainerModule\r\n  ]\r\n})\r\nexport class DocumentationModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ShowdownModule } from 'ngx-showdown';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    ShowdownModule.forRoot({\r\n      flavor: 'github',\r\n      tables: true,\r\n      openLinksInNewWindow: true,\r\n      encodeEmails: true\r\n    }),\r\n  ],\r\n  exports: [ShowdownModule]\r\n})\r\nexport class MarkdownModule {\r\n}\r\n"],"sourceRoot":"webpack:///","file":"pages-documentation-documentation-module-es5.js"}