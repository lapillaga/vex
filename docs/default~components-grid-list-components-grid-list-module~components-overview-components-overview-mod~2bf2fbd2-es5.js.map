{"version":3,"sources":["node_modules/@angular/material/esm2015/grid-list.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.decorators = [\n    { type: Component, args: [{selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                },\n                template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.decorators = [\n    { type: Component, args: [{selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine,] }]\n};\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            },] },\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            },] },\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.decorators = [\n    { type: Component, args: [{selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div><ng-content></ng-content></div>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                host: {\n                    'class': 'mat-grid-list',\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa11 };\n//# sourceMappingURL=grid-list.js.map\n"],"sourceRoot":"webpack:///","file":"default~components-grid-list-components-grid-list-module~components-overview-components-overview-mod~2bf2fbd2-es5.js"}