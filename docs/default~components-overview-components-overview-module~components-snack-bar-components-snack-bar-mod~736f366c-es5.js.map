{"version":3,"sources":["node_modules/@angular/material/esm2015/snack-bar.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state$$1.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map\n"],"sourceRoot":"webpack:///","file":"default~components-overview-components-overview-module~components-snack-bar-components-snack-bar-mod~736f366c-es5.js"}