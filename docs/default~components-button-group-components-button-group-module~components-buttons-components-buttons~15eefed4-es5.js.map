{"version":3,"sources":["node_modules/@angular/material/esm2015/button-toggle.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                },\n                exportAs: 'matButtonToggleGroup',\n            },] },\n];\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)),] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                }\n            },] },\n];\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button', { static: false },] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };\n//# sourceMappingURL=button-toggle.js.map\n"],"sourceRoot":"webpack:///","file":"default~components-button-group-components-button-group-module~components-buttons-components-buttons~15eefed4-es5.js"}