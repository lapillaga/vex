{"version":3,"sources":["node_modules/@angular/material/esm2015/badge.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, isDevMode, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?} _renderer\n     * @param {?=} _animationMode\n     */\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n        if (isDevMode()) {\n            /** @type {?} */\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            /** @type {?} */\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const contentChange = changes['content'];\n        if (contentChange) {\n            /** @type {?} */\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     * @return {?}\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @private\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @private\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const badgeElement = this._renderer.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        /** @type {?} */\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    badgeElement.classList.add(activeClass);\n                }));\n            }));\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @private\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @private\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /**\n     * Clears any existing badges that might be left over from server-side rendering.\n     * @private\n     * @param {?} cssClass\n     * @return {?}\n     */\n    _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            /** @type {?} */\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n}\nMatBadge.decorators = [\n    { type: Directive, args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled',\n                },\n            },] },\n];\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadge };\n//# sourceMappingURL=badge.js.map\n"],"sourceRoot":"webpack:///","file":"default~pages-apps-chat-chat-module~pages-apps-persona-persona-module~pages-apps-profile-profile-mod~ec4de4c3-es5.js"}