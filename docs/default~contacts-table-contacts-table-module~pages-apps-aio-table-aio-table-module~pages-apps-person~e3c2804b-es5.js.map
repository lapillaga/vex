{"version":3,"sources":["node_modules/@angular/material/esm2015/select.js","node_modules/@iconify/icons-ic/twotone-more-vert.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-select-trigger'\n            },] },\n];\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap((/**\n                 * @return {?}\n                 */\n                () => merge(...options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange))))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelectionChanges)));\n        }))));\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.added.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.select()));\n            event.removed.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.deselect()));\n        }));\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._resetOptions();\n            this._initializeSelection();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        }));\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.viewValue));\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            /** @type {?} */\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue, 10000);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => !opt.disabled && !opt.selected));\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            }));\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        }));\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.setActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        }));\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        }));\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        }));\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        }));\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._stateChanges)))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.value));\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.id)).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((/**\n         * @param {?} result\n         * @param {?} current\n         * @param {?} index\n         * @return {?}\n         */\n        (result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }), undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.decorators = [\n    { type: Component, args: [{selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n            },] },\n];\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger', { static: false },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger, { static: false },] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.js.map\n","var data = {\n\t\"body\": \"<path d=\\\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n"],"sourceRoot":"webpack:///","file":"default~contacts-table-contacts-table-module~pages-apps-aio-table-aio-table-module~pages-apps-person~e3c2804b-es5.js"}