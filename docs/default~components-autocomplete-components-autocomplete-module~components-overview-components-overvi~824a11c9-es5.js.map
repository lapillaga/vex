{"version":3,"sources":["node_modules/@angular/material/esm2015/autocomplete.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,0CAAA,EAAA,YAAA;AAAA,aAAA,wCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,8BAAA,EAAA,YAAA;AAAA,aAAA,4BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kCAAA,EAAA,YAAA;AAAA,aAAA,gCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;AAAA,aAAA,eAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,uBAAA,EAAA,YAAA;AAAA,aAAA,qBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,0CAAA,EAAA,YAAA;AAAA,aAAA,wCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,qCAAA,EAAA,YAAA;AAAA,aAAA,mCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,4BAAA,EAAA,YAAA;AAAA,aAAA,0BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,EAAA,YAAA;AAAA,aAAA,yBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kCAAA,EAAA,YAAA;AAAA,aAAA,gCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mDAAA,EAAA,YAAA;AAAA,aAAA,iDAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iCAAA,EAAA,YAAA;AAAA,aAAA,+BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA;AAAA,aAAA,sBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,uBAAA,EAAA,YAAA;AAAA,aAAA,qBAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,8CAAA,GAAA,mBAAA;AAAA;AAAA,iDAAA,CAAA;AAAA;;;AAAA,QAAA,kDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,0CAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,mDAAA,GAAA,mBAAA;AAAA;AAAA,sDAAA,CAAA;AAAA;;;AAAA,QAAA,8CAAA,GAAA,mBAAA;AAAA;AAAA,iDAAA,CAAA;AAAA;;;AAAA,QAAA,kDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,iDAAA,GAAA,mBAAA;AAAA;AAAA,oDAAA,CAAA;AAAA;;;AAAA,QAAA,kDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,gDAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,mDAAA,GAAA,mBAAA;AAAA;AAAA,sDAAA,CAAA;AAAA;;;AAAA,QAAA,6CAAA,GAAA,mBAAA;AAAA;AAAA,uDAAA,CAAA;AAAA;;;AAAA,QAAA,4CAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,0DAAA,GAAA,mBAAA;AAAA;AAAA,4DAAA,CAAA;AAAA;;;AAAA,QAAA,kCAAA,GAAA,mBAAA;AAAA;AAAA,2CAAA,CAAA;AAAA;;;AAAA,QAAA,4CAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;;;;;;AAuBA;;;;;AAIA;;;;;;;AAKA,QAAA,4BAAA,GAAA,CAAA;AACA;;;;QAGA,4B;AACA;;;;AAIA,0CAAA,MAAA,EAAA,MAAA,EAAA;AAAA;;AACA,WAAA,MAAA,GAAA,MAAA;AACA,WAAA,MAAA,GAAA,MAAA;AACA,K,EAEA;;AACA;;;;;QAGA,mB;;;AAEA;;;AACA,QAAA,yBAAA,GAAkC,MAAA,CAAA,mDAAA,CAAA,oBAAA,CAAA,CAAA,CAAkB,mBAAlB,CAAlC;AACA;;;;;;AAIA,QAAA,gCAAA,GAAA,IAA6C,0CAAA,CAAA,gBAAA,CAA7C,CAA2D,kCAA3D,EAA2D;AAC3D,MAAA,UAAA,EAAA,MAD2D;AAE3D,MAAA,OAAA,EAAA;AAF2D,KAA3D,CAAA;AAIA;;;;;AAIA,aAAA,wCAAA,GAAA;AACA,aAAA;AAAY,QAAA,qBAAA,EAAA;AAAZ,OAAA;AACA;;QACA,e;;;;;AACA;;;;;AAKA,+BAAA,kBAAA,EAAA,WAAA,EAAA,QAAA,EAAA;AAAA;;AAAA;;AACA;AACA,cAAA,kBAAA,GAAA,kBAAA;AACA,cAAA,WAAA,GAAA,WAAA;AACA;;;;AAGA,cAAA,SAAA,GAAA,KAAA;AACA,cAAA,OAAA,GAAA,KAAA;AACA;;;;AAGA,cAAA,WAAA,GAAA,IAAA;AACA;;;;AAGA,cAAA,cAAA,GAAA,IAAkC,0CAAA,CAAA,cAAA,CAAlC,EAAA;AACA;;;;AAGA,cAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAA1B,EAAA;AACA;;;;AAGA,cAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAA1B,EAAA;AACA,cAAA,UAAA,GAAA,EAAA;AACA;;;;AAGA,cAAA,EAAA,8BAAsC,4BAAA,EAAtC;AACA,cAAA,sBAAA,GAAA,CAAA,CAAA,QAAA,CAAA,qBAAA;AA9BA;AA+BA;AACA;;;;;;;;;AA0CA;;;6CAGA;AACA,eAAA,WAAA,GAAA,IAA+B,8CAAA,CAAA,4BAAA,CAA/B,CAAyD,KAAA,OAAzD,EAAyD,QAAzD,EAAA,CADA,CAEA;;AACA,eAAA,cAAA;AACA;AACA;;;;;;;;;sCAMA,S,EAAA;AACA,cAAA,KAAA,KAAA,EAAA;AACA,iBAAA,KAAA,CAAA,aAAA,CAAA,SAAA,GAAA,SAAA;AACA;AACA;AACA;;;;;;;wCAIA;AACA,iBAAA,KAAA,KAAA,GAAA,KAAA,KAAA,CAAA,aAAA,CAAA,SAAA,GAAA,CAAA;AACA;AACA;;;;;;;yCAIA;AACA,eAAA,SAAA,GAAA,CAAA,CAAA,KAAA,OAAA,CAAA,MAAA;;AACA,eAAA,qBAAA,CAAA,KAAA,UAAA;;AACA,eAAA,kBAAA,CAAA,YAAA;AACA;AACA;;;;;;;;yCAKA,M,EAAA;AACA;AACA,cAAA,KAAA,GAAA,IAAA,4BAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACA,eAAA,cAAA,CAAA,IAAA,CAAA,KAAA;AACA;AACA;;;;;;;;;8CAMA,S,EAAA;AACA,UAAA,SAAA,CAAA,0BAAA,CAAA,GAAA,KAAA,SAAA;AACA,UAAA,SAAA,CAAA,yBAAA,CAAA,GAAA,CAAA,KAAA,SAAA;AACA;;;4BA5FA;AAAkB,iBAAA,KAAA,OAAA,IAAA,KAAA,SAAA;AAAuC;AACzD;;;;;;;;4BAKA;AAAiC,iBAAA,KAAA,sBAAA;AAAoC;AACrE;;;;;0BAIA,K,EAAA;AACA,eAAA,sBAAA,GAAsC,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,KAArB,CAAtC;AACA;AACA;;;;;;;;;0BAMA,K,EAAA;AACA,cAAA,KAAA,IAAA,KAAA,CAAA,MAAA,EAAA;AACA,iBAAA,UAAA,GAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA;AAAA;;;;;AAKA,sBAAA,SAAA,EAAA,SAAA,EAAA;AACA,cAAA,SAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAAA,GAAA,IAAA;AACA,qBAAA,SAAA;AACa,aARb;AAQa;AAAiB,cAR9B,CAAA;AASA,WAVA,MAWA;AACA,iBAAA,UAAA,GAAA,EAAA;AACA;;AACA,eAAA,qBAAA,CAAA,KAAA,UAAA;;AACA,eAAA,WAAA,CAAA,aAAA,CAAA,SAAA,GAAA,EAAA;AACA;;;;MA/EA,yB;;AAwIA,IAAA,eAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,QAAA,EAAA,kBAAV;AACrB,QAAA,QAAA,EAAA,+JADqB;AAErB,QAAA,MAAA,EAAA,CAAA,qoBAAA,CAFqB;AAGrB,QAAA,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAA,CAAiB,IAH3B;AAIrB,QAAA,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAA,CAAuB,MAJnC;AAKrB,QAAA,QAAA,EAAA,iBALqB;AAMrB,QAAA,MAAA,EAAA,CAAA,eAAA,CANqB;AAOrB,QAAA,IAAA,EAAA;AACA,mBAAA;AADA,SAPqB;AAUrB,QAAA,SAAA,EAAA,CACA;AAAqB,UAAA,OAAA,EAAU,mDAAA,CAAA,6BAAA,CAA/B;AAA0D,UAAA,WAAA,EAAA;AAA1D,SADA;AAVqB,OAAA;AAArB,KADA,CAAA;AAgBA;;AACA,IAAA,eAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,gCAAA;AAA7C,SAAA;AAAL,OAHA,CAAA;AAAA,KAAA;;AAKA,IAAA,eAAA,CAAA,cAAA,GAAA;AACA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAvB;AAAgC,QAAA,IAAA,EAAA,CAAS,0CAAA,CAAA,aAAA,CAAT,EAAoB;AAAG,UAAA,MAAA,EAAA;AAAH,SAApB;AAAhC,OAAA,CADA;AAEA,MAAA,KAAA,EAAA,CAAA;AAAa,QAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAApB;AAA6B,QAAA,IAAA,EAAA,CAAA,OAAA,EAAA;AAAmB,UAAA,MAAA,EAAA;AAAnB,SAAA;AAA7B,OAAA,CAFA;AAGA,MAAA,OAAA,EAAA,CAAA;AAAe,QAAA,IAAA,EAAO,0CAAA,CAAA,iBAAA,CAAtB;AAAqC,QAAA,IAAA,EAAA,CAAS,mDAAA,CAAA,WAAA,CAAT,EAAkB;AAAG,UAAA,WAAA,EAAA;AAAH,SAAlB;AAArC,OAAA,CAHA;AAIA,MAAA,YAAA,EAAA,CAAA;AAAoB,QAAA,IAAA,EAAO,0CAAA,CAAA,iBAAA,CAA3B;AAA0C,QAAA,IAAA,EAAA,CAAS,mDAAA,CAAA,aAAA,CAAT;AAA1C,OAAA,CAJA;AAKA,MAAA,WAAA,EAAA,CAAA;AAAmB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA1B,OAAA,CALA;AAMA,MAAA,qBAAA,EAAA,CAAA;AAA6B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAApC,OAAA,CANA;AAOA,MAAA,UAAA,EAAA,CAAA;AAAkB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAzB,OAAA,CAPA;AAQA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAA7B,OAAA,CARA;AASA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAArB,OAAA,CATA;AAUA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAArB,OAAA,CAVA;AAWA,MAAA,SAAA,EAAA,CAAA;AAAiB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAxB;AAA6B,QAAA,IAAA,EAAA,CAAA,OAAA;AAA7B,OAAA;AAXA,KAAA;AAcA;;;;;AAIA;;;;;QAIA,qB;AACA;;;AAGA,mCAAA,UAAA,EAAA;AAAA;;AACA,WAAA,UAAA,GAAA,UAAA;AACA,K;;AAEA,IAAA,qBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,yBADqB;AAErB,QAAA,QAAA,EAAA;AAFqB,OAAA;AAArB,KADA,CAAA;AAMA;;AACA,IAAA,qBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OADA,CAAA;AAAA,KAAA;AAIA;;;;;AAIA;;;;;;AAIA,QAAA,0BAAA,GAAA,EAAA;AACA;;;;;AAIA,QAAA,yBAAA,GAAA,GAAA;AACA;;;;;AAIA,QAAA,gCAAA,GAAA,IAA6C,0CAAA,CAAA,gBAAA,CAA7C,CAA2D,kCAA3D,CAAA;AACA;;;;;;AAKA,aAAA,wCAAA,CAAA,OAAA,EAAA;AACA;AAAA;;;AAGA;AAAA,iBAAA,OAAA,CAAA,gBAAA,CAAA,UAAA,EAAA;AAAA;AAHA;AAIA;AACA;;;;;;AAIA,QAAA,iDAAA,GAAA;AACA,MAAA,OAAA,EAAA,gCADA;AAEA,MAAA,IAAA,EAAA,CAAW,iDAAA,CAAA,SAAA,CAAX,CAFA;AAGA,MAAA,UAAA,EAAA;AAHA,KAAA;AAKA;;;;;;AAKA,QAAA,+BAAA,GAAA;AACA,MAAA,OAAA,EAAa,4CAAA,CAAA,mBAAA,CADb;AAEA,MAAA,WAAA,EAAiB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA;AAAU;;;AAG3B;AAAA,eAAA,sBAAA;AAAA,OAHiB,CAFjB;AAMA,MAAA,KAAA,EAAA;AANA,KAAA;AAQA;;;;;;AAKA,aAAA,mCAAA,GAAA;AACA,aAAA,KAAA,CAAA,qEACA,4EADA,GAEA,kEAFA,CAAA;AAGA;;QACA,sB;;;AACA;;;;;;;;;;;;AAYA,sCAAA,QAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,IAAA,EAAA,UAAA,EAAA,SAAA,EAAA,cAAA,EAAA;AAAA;;AAAA;;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,iBAAA,GAAA,iBAAA;AACA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,kBAAA,GAAA,kBAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,UAAA,GAAA,UAAA;AACA,aAAA,SAAA,GAAA,SAAA;AACA,aAAA,cAAA,GAAA,cAAA;AACA,aAAA,mBAAA,GAAA,KAAA;AACA,aAAA,qBAAA,GAAA,KAAA;AACA;;;;AAGA,aAAA,sBAAA,GAAA,KAAA;AACA;;;;AAGA,aAAA,qBAAA,GAAqC,kCAAA,CAAA,cAAA,CAAA,CAAY,KAAjD;AACA;;;;;;AAKA,aAAA,mBAAA,GAAA,IAAA;AACA;;;;AAGA,aAAA,oBAAA,GAAA,IAAwC,kCAAA,CAAA,SAAA,CAAxC,EAAA;AACA;;;;;AAIA,aAAA,kBAAA;AAAA;;;AAGA,oBAAA;AACA;AACA;AACA;AACA,UAAA,MAAA,CAAA,mBAAA,GACA,MAAA,CAAA,SAAA,CAAA,aAAA,KAAA,MAAA,CAAA,QAAA,CAAA,aAAA,IAAA,MAAA,CAAA,SADA;AAES,SATT;AAUA;;;;;AAGA,aAAA,SAAA;AAAA;;;AAGA,oBAAA,CAAiB,CAHjB;AAIA;;;;;AAGA,aAAA,UAAA;AAAA;;;AAGA,oBAAA,CAAiB,CAHjB;AAIA;;;;;;;;;AAOA,aAAA,QAAA,GAAA,MAAA;AACA;;;;;AAIA,aAAA,qBAAA,GAAA,KAAA;AACA,aAAA,gBAAA,GAAA,KAAA;AACA;;;;AAGA,aAAA,gBAAA;AAAA;AAAmD,QAAA,MAAA,CAAA,kCAAA,CAAA,OAAA,CAAA,CAAA;AAAK;;;AAGxD,oBAAA;AACA,cAAA,MAAA,CAAA,YAAA,IAAA,MAAA,CAAA,YAAA,CAAA,OAAA,EAAA;AACA,mBAAuB,MAAA,CAAA,kCAAA,CAAA,OAAA,CAAA,CAAA,kCAAK,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA;AAAA;;;;AAI5B,sBAAA,MAAA;AAAA,qBAAA,MAAA,CAAA,iBAAA;AAAA,aAJ4B,CAAL,EAAvB;AAKA,WAPA,CAQA;AACA;;;AACA,iBAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CACA,YADA,GAEA,IAFA,CAEsB,MAAA,CAAA,4CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAFtB,EAE+B,MAAA,CAAA,4CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;;;AAGxC;AAAA,mBAAA,MAAA,CAAA,gBAAA;AAAA,WAH+B,CAF/B,CAAA;AAMS,SAnB0C,CAAnD;AAoBA,aAAA,eAAA,GAAA,cAAA;AACA;AACA;;;;;;;;;;AAaA;;;0CAGA;AAAA;;AACA,cAAA,OAAA,MAAA,KAAA,WAAA,EAAA;AACA,iBAAA,KAAA,CAAA,iBAAA;AAAA;;;AAGA,wBAAA;AACA,cAAA,MAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,kBAAA;AACa,aALb;;AAMA,gBAAgB,MAAA,CAAA,kDAAA,CAAA,oBAAA,CAAA,CAAA,EAAhB,EAAkC;AAClC;AACA,kBAAA,OAAA,GAAA,KAAA,QAAA,CAAA,aAAA;AACA;;AACA,kBAAA,QAAA,GAAA,OAAA,CAAA,WAAA,GAAA,OAAA,CAAA,WAAA,EAAA,GAAA,IAAA,CAJkC,CAKlC;AACA;;AACA,mBAAA,mBAAA,GAAA,QAAA;AAAA;AAA8E,cAAA,MAA9E,CAA8E,UAA9E;AACA;AACA;AACA;AACA;;;;;;;oCAIA,O,EAAA;AACA,cAAA,OAAA,CAAA,UAAA,CAAA,IAAA,KAAA,iBAAA,EAAA;AACA,iBAAA,qBAAA,CAAA,KAAA,iBAAA;;AACA,gBAAA,KAAA,SAAA,EAAA;AACA;AAA8B,mBAAA,WAA9B,CAA8B,cAA9B;AACA;AACA;AACA;AACA;;;;;;sCAGA;AACA,cAAA,OAAA,MAAA,KAAA,WAAA,EAAA;AACA,YAAA,MAAA,CAAA,mBAAA,CAAA,MAAA,EAAA,KAAA,kBAAA;AACA;;AACA,eAAA,qBAAA,CAAA,WAAA;;AACA,eAAA,mBAAA,GAAA,IAAA;;AACA,eAAA,aAAA;;AACA,eAAA,oBAAA,CAAA,QAAA;AACA;AACA;;;;;;;;AAOA;;;;oCAIA;AACA,eAAA,cAAA;;AACA,eAAA,WAAA;AACA;AACA;;;;;;;qCAIA;AACA,eAAA,WAAA;;AACA,cAAA,CAAA,KAAA,gBAAA,EAAA;AACA;AACA;;AACA,cAAA,KAAA,SAAA,EAAA;AACA;AACA,iBAAA,YAAA,CAAA,MAAA,CAAA,IAAA;AACA;;AACA,eAAA,YAAA,CAAA,OAAA,GAAA,KAAA,gBAAA,GAAA,KAAA;;AACA,cAAA,KAAA,WAAA,IAAA,KAAA,WAAA,CAAA,WAAA,EAAA,EAAA;AACA,iBAAA,WAAA,CAAA,MAAA;;AACA,iBAAA,2BAAA,CAAA,WAAA;AACA,WAbA,CAcA;AACA;;;AACA,cAAA,CAAA,KAAA,mBAAA,EAAA;AACA;AACA;AACA;AACA;AACA,iBAAA,kBAAA,CAAA,aAAA;AACA;AACA;AACA;;;;;;;;yCAKA;AACA,cAAA,KAAA,gBAAA,EAAA;AACA;AAA0B,iBAAA,WAA1B,CAA0B,cAA1B;AACA;AACA;AACA;;;;;;;;;AAgCA;;;;;iDAKA;AAAA;;AACA,iBAAe,MAAA,CAAA,kCAAA,CAAA,OAAA,CAAA,CAAA;AAAK;AAAoB,UAAA,MAAA,CAAA,kCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,KAAA,SAAT,EAAS,OAAT,CAAzB;AAAkC;AAAgD,UAAA,MAAA,CAAA,kCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,KAAA,SAAT,EAAS,UAAT,CAAlF,EACf,IADe,CACG,MAAA,CAAA,4CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;;AAIxB,oBAAA,KAAA,EAAA;AACA;AACA;;AACA;AACA,gBAAA,WAAA;AAAA;AAA8C,YAAA,MAAA,CAAA,mBAAA,IAAA,KAAA,CAAA,YAAA,GAAA,KAAA,CAAA,YAAA,GAAA,CAAA,CAAA,GAC9C,KAAA,CAAA,MADA;AAEA;;AACA,gBAAA,SAAA,GAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA,WAAA,CAAA,aAAA,GAAA,IAAA;AACA,mBAAA,MAAA,CAAA,gBAAA,IAAA,WAAA,KAAA,MAAA,CAAA,QAAA,CAAA,aAAA,KACA,CAAA,SAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,WAAA,CADA,KAEA,CAAA,CAAA,MAAA,CAAA,WAAA,IAAA,CAAA,MAAA,CAAA,WAAA,CAAA,cAAA,CAAA,QAAA,CAAA,WAAA,CAFA;AAGS,WAfS,CADH,CAAf;AAiBA,S,CACA;;AACA;;;;;;;mCAIA,K,EAAA;AAAA;;AACA,UAAA,OAAA,CAAA,OAAA,CAAA,IAAA,EAAA,IAAA;AAAA;;;AAGA;AAAA,mBAAA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA;AAAA,WAHA;AAIA,S,CACA;;AACA;;;;;;;yCAIA,E,EAAA;AACA,eAAA,SAAA,GAAA,EAAA;AACA,S,CACA;;AACA;;;;;;;0CAIA,E,EAAA;AACA,eAAA,UAAA,GAAA,EAAA;AACA,S,CACA;;AACA;;;;;;;yCAIA,U,EAAA;AACA,eAAA,QAAA,CAAA,aAAA,CAAA,QAAA,GAAA,UAAA;AACA;AACA;;;;;;;uCAIA,K,EAAA;AACA;AACA,cAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAFA,CAGA;AACA;AACA;AACA;;AACA,cAAA,OAAA,KAAwB,kDAAA,CAAA,QAAA,CAAxB,EAA8B;AAC9B,YAAA,KAAA,CAAA,cAAA;AACA;;AACA,cAAA,KAAA,YAAA,IAAA,OAAA,KAA6C,kDAAA,CAAA,OAAA,CAA7C,IAAkD,KAAA,SAAlD,EAAkD;AAClD,iBAAA,YAAA,CAAA,qBAAA;;AACA,iBAAA,gBAAA;;AACA,YAAA,KAAA,CAAA,cAAA;AACA,WAJA,MAKA,IAAA,KAAA,YAAA,EAAA;AACA;AACA,gBAAA,cAAA,GAAA,KAAA,YAAA,CAAA,WAAA,CAAA,UAAA;AACA;;AACA,gBAAA,UAAA,GAAA,OAAA,KAA2C,kDAAA,CAAA,UAAA,CAA3C,IAAmD,OAAA,KAAgB,kDAAA,CAAA,YAAA,CAAnE;;AACA,gBAAA,KAAA,SAAA,IAAA,OAAA,KAA8C,kDAAA,CAAA,KAAA,CAA9C,EAAiD;AACjD,mBAAA,YAAA,CAAA,WAAA,CAAA,SAAA,CAAA,KAAA;AACA,aAFA,MAGA,IAAA,UAAA,IAAA,KAAA,QAAA,EAAA,EAAA;AACA,mBAAA,SAAA;AACA;;AACA,gBAAA,UAAA,IAAA,KAAA,YAAA,CAAA,WAAA,CAAA,UAAA,KAAA,cAAA,EAAA;AACA,mBAAA,eAAA;AACA;AACA;AACA;AACA;;;;;;;qCAIA,K,EAAA;AACA;AACA,cAAA,MAAA;AAAA;AAAmC,UAAA,KAAA,CAAA,MAAnC;AACA;;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAJA,CAKA;;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,IAAA,EAAA,GAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA;AACA,WARA,CASA;AACA;AACA;AACA;AACA;;;AACA,cAAA,KAAA,cAAA,KAAA,KAAA,EAAA;AACA,iBAAA,cAAA,GAAA,KAAA;;AACA,iBAAA,SAAA,CAAA,KAAA;;AACA,gBAAA,KAAA,QAAA,MAAA,KAAA,SAAA,CAAA,aAAA,KAAA,KAAA,CAAA,MAAA,EAAA;AACA,mBAAA,SAAA;AACA;AACA;AACA;AACA;;;;;;uCAGA;AACA,cAAA,CAAA,KAAA,mBAAA,EAAA;AACA,iBAAA,mBAAA,GAAA,IAAA;AACA,WAFA,MAGA,IAAA,KAAA,QAAA,EAAA,EAAA;AACA,iBAAA,cAAA,GAAA,KAAA,QAAA,CAAA,aAAA,CAAA,KAAA;;AACA,iBAAA,cAAA;;AACA,iBAAA,WAAA,CAAA,IAAA;AACA;AACA;AACA;;;;;;;;;;;sCAQA;AAAA,cAAA,aAAA,uEAAA,KAAA;;AACA,cAAA,KAAA,UAAA,IAAA,KAAA,UAAA,CAAA,UAAA,KAAA,MAAA,EAAA;AACA,gBAAA,aAAA,EAAA;AACA,mBAAA,UAAA,CAAA,oBAAA;AACA,aAFA,MAGA;AACA,mBAAA,UAAA,CAAA,UAAA,GAAA,QAAA;AACA;;AACA,iBAAA,sBAAA,GAAA,IAAA;AACA;AACA;AACA;;;;;;;;sCAKA;AACA,cAAA,KAAA,sBAAA,EAAA;AACA,iBAAA,UAAA,CAAA,UAAA,GAAA,MAAA;AACA,iBAAA,sBAAA,GAAA,KAAA;AACA;AACA;AACA;;;;;;;;;;;;;;0CAWA;AACA;AACA,cAAA,KAAA,GAAA,KAAA,YAAA,CAAA,WAAA,CAAA,eAAA,IAAA,CAAA;AACA;;AACA,cAAA,UAAA,GAA2B,MAAA,CAAA,mDAAA,CAAA,+BAAA,CAAA,CAAA,CAA6B,KAA7B,EAA6B,KAAA,YAAA,CAAA,OAA7B,EAA6B,KAAA,YAAA,CAAA,YAA7B,CAA3B;;AACA,cAAA,KAAA,KAAA,CAAA,IAAA,UAAA,KAAA,CAAA,EAAA;AACA;AACA;AACA;AACA,iBAAA,YAAA,CAAA,aAAA,CAAA,CAAA;AACA,WALA,MAMA;AACA;AACA,gBAAA,iBAAA,GAAsC,MAAA,CAAA,mDAAA,CAAA,0BAAA,CAAA,CAAA,CAAwB,KAAA,GAAA,UAAxB,EAAwB,0BAAxB,EAAwB,KAAA,YAAA,CAAA,aAAA,EAAxB,EAAwB,yBAAxB,CAAtC;;AACA,iBAAA,YAAA,CAAA,aAAA,CAAA,iBAAA;AACA;AACA;AACA;;;;;;;;;qDAMA;AAAA;;AACA;AACA,cAAA,WAAA,GAAA,KAAA,KAAA,CAAA,QAAA,CAAA,YAAA,GAAA,IAAA,CAAoE,MAAA,CAAA,4CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAApE,CAAA;AACA;;;AACA,cAAA,aAAA,GAAA,KAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAqE,MAAA,CAAA,4CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;AAGxE;AAAA,mBAAA,MAAA,CAAA,iBAAA,CAAA,mBAAA,EAAA;AAAA,WAHqE,CAArE,EAIA;AACA;AACQ,UAAA,MAAA,CAAA,4CAAA,CAAA,OAAA,CAAA,CAAA,CAAK,CAAL,CANR,CAAA,CAJA,CAWA;;AACA,iBAAe,MAAA,CAAA,kCAAA,CAAA,OAAA,CAAA,CAAA,CAAK,WAAL,EAAK,aAAL,EACf,IADe,EAEf;AACA;AACQ,UAAA,MAAA,CAAA,4CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;;;AAGjB,sBAAA;AACA;AACA,gBAAA,OAAA,GAAA,MAAA,CAAA,SAAA;;AACA,YAAA,MAAA,CAAA,gBAAA;;AACA,YAAA,MAAA,CAAA,YAAA,CAAA,cAAA;;AACA,gBAAA,MAAA,CAAA,SAAA,EAAA;AACA;AAA8B,cAAA,MAAA,CAAA,WAA9B,CAA8B,cAA9B,GADA,CAEA;AACA;AACA;AACA;;;AACA,kBAAA,OAAA,KAAA,MAAA,CAAA,SAAA,EAAA;AACA,gBAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,IAAA;AACA;AACA;;AACA,mBAAA,MAAA,CAAA,mBAAA;AACS,WAnBD,CAJO,EAwBf;AACQ,UAAA,MAAA,CAAA,4CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAzBO,EA0Bf;AA1Be,WA2Bf,SA3Be;AA2Bf;;;;AAIA,oBAAA,KAAA;AAAA,mBAAA,MAAA,CAAA,iBAAA,CAAA,KAAA,CAAA;AAAA,WA/Be,CAAf;AAgCA;AACA;;;;;;;;wCAKA;AACA,cAAA,KAAA,WAAA,EAAA;AACA,iBAAA,UAAA;;AACA,iBAAA,WAAA,CAAA,OAAA;;AACA,iBAAA,WAAA,GAAA,IAAA;AACA;AACA;AACA;;;;;;;;yCAKA,K,EAAA;AACA;AACA,cAAA,SAAA,GAAA,KAAA,YAAA,IAAA,KAAA,YAAA,CAAA,WAAA,GACA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CADA,GAEA,KAFA,CAFA,CAKA;AACA;;AACA;;AACA,cAAA,UAAA,GAAA,SAAA,IAAA,IAAA,GAAA,SAAA,GAAA,EAAA,CARA,CASA;AACA;;AACA,cAAA,KAAA,UAAA,EAAA;AACA,iBAAA,UAAA,CAAA,QAAA,CAAA,KAAA,GAAA,UAAA;AACA,WAFA,MAGA;AACA,iBAAA,QAAA,CAAA,aAAA,CAAA,KAAA,GAAA,UAAA;AACA;;AACA,eAAA,cAAA,GAAA,UAAA;AACA;AACA;;;;;;;;;;;0CAQA,K,EAAA;AACA,cAAA,KAAA,IAAA,KAAA,CAAA,MAAA,EAAA;AACA,iBAAA,4BAAA,CAAA,KAAA,CAAA,MAAA;;AACA,iBAAA,gBAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA;;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA;;AACA,iBAAA,QAAA,CAAA,aAAA,CAAA,KAAA;;AACA,iBAAA,YAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,MAAA;AACA;;AACA,eAAA,UAAA;AACA;AACA;;;;;;;;;qDAMA,I,EAAA;AACA,eAAA,YAAA,CAAA,OAAA,CAAA,OAAA;AAAA;;;;AAIA,oBAAA,MAAA,EAAA;AACA,gBAAA,MAAA,IAAA,IAAA,IAAA,MAAA,CAAA,QAAA,EAAA;AACA,cAAA,MAAA,CAAA,QAAA;AACA;AACS,WART;AASA;AACA;;;;;;;yCAIA;AAAA;;AACA,cAAA,CAAA,KAAA,YAAA,EAAA;AACA,kBAAA,mCAAA,EAAA;AACA;AACA;;;AACA,cAAA,UAAA,GAAA,KAAA,WAAA;;AACA,cAAA,CAAA,UAAA,EAAA;AACA,iBAAA,OAAA,GAAA,IAA+B,gDAAA,CAAA,gBAAA,CAA/B,CAA6C,KAAA,YAAA,CAAA,QAA7C,EAA6C,KAAA,iBAA7C,CAAA;AACA,YAAA,UAAA,GAAA,KAAA,QAAA,CAAA,MAAA,CAAA,KAAA,iBAAA,EAAA,CAAA;AACA,iBAAA,WAAA,GAAA,UAAA,CAHA,CAIA;AACA;;AACA,YAAA,UAAA,CAAA,aAAA,GAAA,SAAA;AAAA;;;;AAIA,sBAAA,KAAA,EAAA;AACA;AACA;AACA,kBAAA,KAAA,CAAA,OAAA,KAAsC,kDAAA,CAAA,QAAA,CAAtC,IAA4C,KAAA,CAAA,OAAA,KAAuB,kDAAA,CAAA,UAAA,CAAvB,IAA+B,KAAA,CAAA,MAA3E,EAA2E;AAC3E,gBAAA,MAAA,CAAA,gBAAA;;AACA,gBAAA,MAAA,CAAA,oBAAA,CAAA,IAAA,GAF2E,CAG3E;AACA;;;AACA,gBAAA,KAAA,CAAA,eAAA;AACA,gBAAA,KAAA,CAAA,cAAA;AACA;AACa,aAfb;;AAgBA,gBAAA,KAAA,cAAA,EAAA;AACA,mBAAA,qBAAA,GAAA,KAAA,cAAA,CAAA,MAAA,GAAA,SAAA;AAAA;;;AAGA,0BAAA;AACA,oBAAA,MAAA,CAAA,SAAA,IAAA,UAAA,EAAA;AACA,kBAAA,UAAA,CAAA,UAAA,CAAA;AAA+C,oBAAA,KAAA,EAAA,MAAA,CAAA,cAAA;AAA/C,mBAAA;AACA;AACiB,eAPjB,CAAA;AAQA;AACA,WAhCA,MAiCA;AACA;AACA,iBAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,oBAAA,EAAA;;AACA,YAAA,UAAA,CAAA,UAAA,CAAA;AAAmC,cAAA,KAAA,EAAA,KAAA,cAAA;AAAnC,aAAA;AACA;;AACA,cAAA,UAAA,IAAA,CAAA,UAAA,CAAA,WAAA,EAAA,EAAA;AACA,YAAA,UAAA,CAAA,MAAA,CAAA,KAAA,OAAA;AACA,iBAAA,2BAAA,GAAA,KAAA,0BAAA,EAAA;AACA;AACA;;;AACA,cAAA,OAAA,GAAA,KAAA,SAAA;;AACA,eAAA,YAAA,CAAA,cAAA;;AACA,eAAA,YAAA,CAAA,OAAA,GAAA,KAAA,gBAAA,GAAA,IAAA,CAnDA,CAoDA;AACA;;AACA,cAAA,KAAA,SAAA,IAAA,OAAA,KAAA,KAAA,SAAA,EAAA;AACA,iBAAA,YAAA,CAAA,MAAA,CAAA,IAAA;AACA;AACA;AACA;;;;;;;4CAIA;AACA,iBAAA,IAAmB,iDAAA,CAAA,eAAA,CAAnB,CAAgC;AAChC,YAAA,gBAAA,EAAA,KAAA,mBAAA,EADgC;AAEhC,YAAA,cAAA,EAAA,KAAA,eAAA,EAFgC;AAGhC,YAAA,KAAA,EAAA,KAAA,cAAA,EAHgC;AAIhC,YAAA,SAAA,EAAA,KAAA;AAJgC,WAAhC,CAAA;AAMA;AACA;;;;;;;8CAIA;AACA;AACA,cAAA,QAAA,GAAA,KAAA,QAAA,CAAA,QAAA,GACA,mBADA,CACA,KAAA,oBAAA,EADA,EAEA,sBAFA,CAEA,KAFA,EAGA,QAHA,CAGA,KAHA,CAAA;;AAIA,eAAA,qBAAA,CAAA,QAAA;;AACA,eAAA,iBAAA,GAAA,QAAA;AACA,iBAAA,QAAA;AACA;AACA;;;;;;;;;8CAMA,gB,EAAA;AACA;AACA,cAAA,aAAA,GAAA;AACA,YAAA,OAAA,EAAA,OADA;AAEA,YAAA,OAAA,EAAA,QAFA;AAGA,YAAA,QAAA,EAAA,OAHA;AAIA,YAAA,QAAA,EAAA;AAJA,WAAA;AAMA;;AACA,cAAA,aAAA,GAAA;AACA,YAAA,OAAA,EAAA,OADA;AAEA,YAAA,OAAA,EAAA,KAFA;AAGA,YAAA,QAAA,EAAA,OAHA;AAIA,YAAA,QAAA,EAAA,QAJA;AAKA;AACA;AACA;AACA,YAAA,UAAA,EAAA;AARA,WAAA;AAUA;;AACA,cAAA,SAAA;;AACA,cAAA,KAAA,QAAA,KAAA,OAAA,EAAA;AACA,YAAA,SAAA,GAAA,CAAA,aAAA,CAAA;AACA,WAFA,MAGA,IAAA,KAAA,QAAA,KAAA,OAAA,EAAA;AACA,YAAA,SAAA,GAAA,CAAA,aAAA,CAAA;AACA,WAFA,MAGA;AACA,YAAA,SAAA,GAAA,CAAA,aAAA,EAAA,aAAA,CAAA;AACA;;AACA,UAAA,gBAAA,CAAA,aAAA,CAAA,SAAA;AACA;AACA;;;;;;;+CAIA;AACA,cAAA,KAAA,WAAA,EAAA;AACA,mBAAA,KAAA,WAAA,CAAA,UAAA;AACA;;AACA,iBAAA,KAAA,UAAA,GAAA,KAAA,UAAA,CAAA,yBAAA,EAAA,GAAA,KAAA,QAAA;AACA;AACA;;;;;;;yCAIA;AACA,iBAAA,KAAA,YAAA,CAAA,UAAA,IAAA,KAAA,aAAA,EAAA;AACA;AACA;;;;;;;;wCAKA;AACA,iBAAA,KAAA,oBAAA,GAAA,aAAA,CAAA,qBAAA,GAAA,KAAA;AACA;AACA;;;;;;;;;2CAMA;AACA,eAAA,YAAA,CAAA,WAAA,CAAA,aAAA,CAAA,KAAA,YAAA,CAAA,qBAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA;;;;;;;;mCAKA;AACA;AACA,cAAA,OAAA,GAAA,KAAA,QAAA,CAAA,aAAA;AACA,iBAAA,CAAA,OAAA,CAAA,QAAA,IAAA,CAAA,OAAA,CAAA,QAAA,IAAA,CAAA,KAAA,qBAAA;AACA;;;4BA7mBA;AAAgC,iBAAA,KAAA,qBAAA;AAAmC;AACnE;;;;;0BAIA,K,EAAA;AACA,eAAA,qBAAA,GAAqC,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,KAArB,CAArC;AACA;;;4BAmDA;AACA,iBAAA,KAAA,gBAAA,IAAA,KAAA,YAAA,CAAA,SAAA;AACA;;;4BAoDA;AAAA;;AACA,iBAAe,MAAA,CAAA,kCAAA,CAAA,OAAA,CAAA,CAAA,CAAK,KAAA,gBAAL,EAAK,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAkE,MAAA,CAAA,4CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;AAG5F;AAAA,mBAAA,MAAA,CAAA,gBAAA;AAAA,WAHsF,CAAlE,CAAL,EAGf,KAAA,oBAHe,EAGf,KAAA,sBAAA,EAHe,EAGf,KAAA,WAAA,GACA,KAAA,WAAA,CAAA,WAAA,GAAA,IAAA,CAAgD,MAAA,CAAA,4CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;AAGtD;AAAA,mBAAA,MAAA,CAAA,gBAAA;AAAA,WAHgD,CAAhD,CADA,GAKY,MAAA,CAAA,kCAAA,CAAA,IAAA,CAAA,CAAA,EARG,EAQD,IARC,EASf;AACQ,UAAA,MAAA,CAAA,4CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;;AAIX,oBAAA,KAAA;AAAA,mBAAA,KAAA,YAAkC,mDAAA,CAAA,0BAAA,CAAlC,GAA0D,KAA1D,GAA0D,IAA1D;AAAA,WAJQ,CAVO,CAAf;AAeA;AACA;;;;;;;4BAIA;AACA,cAAA,KAAA,YAAA,IAAA,KAAA,YAAA,CAAA,WAAA,EAAA;AACA,mBAAA,KAAA,YAAA,CAAA,WAAA,CAAA,UAAA;AACA;;AACA,iBAAA,IAAA;AACA;;;;;;AAqeA,IAAA,sBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,qDADqB;AAErB,QAAA,IAAA,EAAA;AACA,mBAAA,0BADA;AAEA,iCAAA,uBAFA;AAGA,yBAAA,0CAHA;AAIA,sCAAA,sCAJA;AAKA,0CAAA,sDALA;AAMA,kCAAA,oDANA;AAOA,8BAAA,gEAPA;AAQA,kCAAA,uBARA;AASA;AACA;AACA,uBAAA,gBAXA;AAYA,oBAAA,cAZA;AAaA,qBAAA,sBAbA;AAcA,uBAAA;AAdA,SAFqB;AAkBrB,QAAA,QAAA,EAAA,wBAlBqB;AAmBrB,QAAA,SAAA,EAAA,CAAA,+BAAA;AAnBqB,OAAA;AAArB,KADA,CAAA;AAuBA;;AACA,IAAA,sBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,iDAAA,CAAA,SAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,kBAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAAZ,OAJA,EAKA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OALA,EAMA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,gCAAA;AAA7C,SAAA;AAAL,OANA,EAOA;AAAK,QAAA,IAAA,EAAO,8CAAA,CAAA,gBAAA,CAAZ;AAA0B,QAAA,UAAA,EAAA,CAAA;AAAgB,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAvB,SAAA;AAA1B,OAPA,EAQA;AAAK,QAAA,IAAA,EAAO,0DAAA,CAAA,cAAA,CAAZ;AAAwB,QAAA,UAAA,EAAA,CAAA;AAAgB,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAvB,SAAA,EAAiC;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,MAAA;AAAV,SAAjC;AAAxB,OARA,EASA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAvC,SAAA,EAAiD;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAV;AAAgB,UAAA,IAAA,EAAA,CAAS,6CAAA,CAAA,UAAA,CAAT;AAAhB,SAAjD;AAAL,OATA,EAUA;AAAK,QAAA,IAAA,EAAO,mDAAA,CAAA,eAAA;AAAZ,OAVA,CAAA;AAAA,KAAA;;AAYA,IAAA,sBAAA,CAAA,cAAA,GAAA;AACA,MAAA,YAAA,EAAA,CAAA;AAAoB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAA3B;AAAgC,QAAA,IAAA,EAAA,CAAA,iBAAA;AAAhC,OAAA,CADA;AAEA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAvB;AAA4B,QAAA,IAAA,EAAA,CAAA,yBAAA;AAA5B,OAAA,CAFA;AAGA,MAAA,WAAA,EAAA,CAAA;AAAmB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAA1B;AAA+B,QAAA,IAAA,EAAA,CAAA,4BAAA;AAA/B,OAAA,CAHA;AAIA,MAAA,qBAAA,EAAA,CAAA;AAA6B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAApC;AAAyC,QAAA,IAAA,EAAA,CAAA,cAAA;AAAzC,OAAA,CAJA;AAKA,MAAA,oBAAA,EAAA,CAAA;AAA4B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAAnC;AAAwC,QAAA,IAAA,EAAA,CAAA,yBAAA;AAAxC,OAAA;AALA,KAAA;AAQA;;;;;QAIA,qB;;;;AAEA,IAAA,qBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAZ;AAAoB,MAAA,IAAA,EAAA,CAAA;AACpB,QAAA,OAAA,EAAA,CAA0B,mDAAA,CAAA,iBAAA,CAA1B,EAA2C,iDAAA,CAAA,eAAA,CAA3C,EAA0D,mDAAA,CAAA,iBAAA,CAA1D,EAA2E,6CAAA,CAAA,cAAA,CAA3E,CADoB;AAEpB,QAAA,OAAA,EAAA,CACA,eADA,EAEoB,mDAAA,CAAA,iBAAA,CAFpB,EAGA,sBAHA,EAIA,qBAJA,EAKoB,mDAAA,CAAA,iBAAA,CALpB,CAFoB;AASpB,QAAA,YAAA,EAAA,CAAA,eAAA,EAAA,sBAAA,EAAA,qBAAA,CAToB;AAUpB,QAAA,SAAA,EAAA,CAAA,iDAAA;AAVoB,OAAA;AAApB,KADA,CAAA;AAeA;;;;;AAKA;;;;AAMA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, switchMap, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (_supportsShadowDom()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };\n//# sourceMappingURL=autocomplete.js.map\n"],"sourceRoot":"webpack:///","file":"default~components-autocomplete-components-autocomplete-module~components-overview-components-overvi~824a11c9-es5.js"}