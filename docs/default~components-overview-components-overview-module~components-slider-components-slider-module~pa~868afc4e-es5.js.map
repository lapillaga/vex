{"version":3,"sources":["node_modules/@angular/material/esm2015/slider.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinTabIndex, GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n * @type {?}\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n * @type {?}\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlider)),\n    multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/**\n * \\@docs-private\n */\nclass MatSliderBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} tabIndex\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /**\n         * Event emitted when the slider value has changed.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the slider thumb moves.\n         */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /**\n         * The size of a tick interval as a percentage of the size of the track.\n         */\n        this._tickIntervalPercent = 0;\n        /**\n         * The dimensions of the slider.\n         */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Subscription to the Directionality change EventEmitter.\n         */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slider is inverted.\n     * @return {?}\n     */\n    get invert() { return this._invert; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /**\n     * The maximum value that the slider can have.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The minimum value that the slider can have.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        // If the value wasn't explicitly set by the user, set it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The values at which the thumb will snap.\n     * @return {?}\n     */\n    get step() { return this._step; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = (/** @type {?} */ (this._step.toString().split('.').pop())).length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether or not to show the thumb label.\n     * @return {?}\n     */\n    get thumbLabel() { return this._thumbLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     * @return {?}\n     */\n    get tickInterval() { return this._tickInterval; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, (/** @type {?} */ (this._tickInterval)));\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /**\n     * Value of the slider.\n     * @return {?}\n     */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        if (v !== this._value) {\n            /** @type {?} */\n            let value = coerceNumberProperty(v);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the slider is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * The value to be used for display purposes.\n     * @return {?}\n     */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith((/** @type {?} */ (this.value)));\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /**\n     * set focus to the host element\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /**\n     * blur the host element\n     * @return {?}\n     */\n    blur() {\n        this._blurHostElement();\n    }\n    /**\n     * The percentage of the slider that coincides with the value.\n     * @return {?}\n     */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     * @return {?}\n     */\n    get _invertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /**\n     * Whether the slider is at its minimum value.\n     * @return {?}\n     */\n    get _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     * @return {?}\n     */\n    get _thumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /**\n     * CSS styles for the track background element.\n     * @return {?}\n     */\n    get _trackBackgroundStyles() {\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n        };\n    }\n    /**\n     * CSS styles for the track fill element.\n     * @return {?}\n     */\n    get _trackFillStyles() {\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n        };\n    }\n    /**\n     * CSS styles for the ticks container element.\n     * @return {?}\n     */\n    get _ticksContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        /** @type {?} */\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /**\n     * CSS styles for the ticks element.\n     * @return {?}\n     */\n    get _ticksStyles() {\n        /** @type {?} */\n        let tickSize = this._tickIntervalPercent * 100;\n        /** @type {?} */\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        /** @type {?} */\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        /** @type {?} */\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue && this._thumbGap) {\n            /** @type {?} */\n            let side = this.vertical ?\n                (this._invertAxis ? 'Bottom' : 'Top') :\n                (this._invertAxis ? 'Right' : 'Left');\n            styles[`padding${side}`] = `${this._thumbGap}px`;\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get _thumbContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        /** @type {?} */\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     * @return {?}\n     */\n    _shouldInvertMouseCoords() {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    }\n    /**\n     * The language direction for this slider element.\n     * @private\n     * @return {?}\n     */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        (origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        }));\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onMousedown(event) {\n        // Don't do anything if the slider is disabled or the\n        // user is using anything other than the main mouse button.\n        if (this.disabled || event.button !== 0) {\n            return;\n        }\n        /** @type {?} */\n        const oldValue = this.value;\n        this._isSliding = false;\n        this._focusHostElement();\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\n        // Emit a change and input event if the value changed.\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onSlide(event) {\n        if (this.disabled) {\n            return;\n        }\n        // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n        // state, call the slide start handler manually.\n        if (!this._isSliding) {\n            this._onSlideStart(null);\n        }\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        /** @type {?} */\n        let oldValue = this.value;\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n        // Native range elements always emit `input` events when the value changed while sliding.\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onSlideStart(event) {\n        if (this.disabled || this._isSliding) {\n            return;\n        }\n        // Simulate mouseenter in case this is a mobile device.\n        this._onMouseenter();\n        this._isSliding = true;\n        this._focusHostElement();\n        this._valueOnSlideStart = this.value;\n        if (event) {\n            this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n            event.preventDefault();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onSlideEnd() {\n        this._isSliding = false;\n        if (this._valueOnSlideStart != this.value && !this.disabled) {\n            this._emitChangeEvent();\n        }\n        this._valueOnSlideStart = null;\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n    _onBlur() {\n        this.onTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        /** @type {?} */\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _onKeyup() {\n        this._isSliding = false;\n    }\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @private\n     * @param {?} numSteps\n     * @return {?}\n     */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @private\n     * @param {?} pos\n     * @return {?}\n     */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        /** @type {?} */\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        /** @type {?} */\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        /** @type {?} */\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            /** @type {?} */\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            /** @type {?} */\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @private\n     * @return {?}\n     */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            /** @type {?} */\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            /** @type {?} */\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            /** @type {?} */\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            /** @type {?} */\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /**\n     * Creates a slider change object from the specified value.\n     * @private\n     * @param {?=} value\n     * @return {?}\n     */\n    _createChangeEvent(value = this.value) {\n        /** @type {?} */\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @private\n     * @param {?} percentage\n     * @return {?}\n     */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /**\n     * Return a number between two numbers.\n     * @private\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @private\n     * @return {?}\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Blurs the native element.\n     * @private\n     * @return {?}\n     */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.decorators = [\n    { type: Component, args: [{selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(mousedown)': '_onMousedown($event)',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    '(slide)': '_onSlide($event)',\n                    '(slideend)': '_onSlideEnd()',\n                    '(slidestart)': '_onSlideStart($event)',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper><div class=\\\"mat-slider-track-wrapper\\\"><div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div><div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div></div><div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\"><div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div></div><div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\"><div class=\\\"mat-slider-focus-ring\\\"></div><div class=\\\"mat-slider-thumb\\\"></div><div class=\\\"mat-slider-thumb-label\\\"><span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span></div></div></div>\",\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider.mat-slider-sliding:not(.mat-slider-disabled),.mat-slider:not(.mat-slider-disabled):active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}\"],\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSliderModule {\n}\nMatSliderModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider],\n                providers: [{ provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSlider };\n//# sourceMappingURL=slider.js.map\n"],"sourceRoot":"webpack:///","file":"default~components-overview-components-overview-module~components-slider-components-slider-module~pa~868afc4e-es5.js"}